
Test-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00002bea  00002c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000c4  008000c4  00002ce2  2**0
                  ALLOC
  3 .stab         000022ec  00000000  00000000  00002ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b52  00000000  00000000  00004fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <main>
      8a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac eb       	ldi	r26, 0xBC	; 188
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c eb       	ldi	r24, 0xBC	; 188
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c eb       	ldi	r22, 0xBC	; 188
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <IRinit>:

#include "IR.h"

void IRinit(void) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	IR_SEN_DDR  &= ~((1<< IR_FRONT_SEN_PIN )|(1<< IR_BACK_SEN_PIN ));		/* Set sensors pins to input */
     ca6:	a1 e3       	ldi	r26, 0x31	; 49
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e1 e3       	ldi	r30, 0x31	; 49
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8b 7e       	andi	r24, 0xEB	; 235
     cb2:	8c 93       	st	X, r24
	IR_SEN_PORT |= ((1<< IR_FRONT_SEN_PIN )||(1<< IR_BACK_SEN_PIN ));		/* Activate pull up for sensors pins {} */
     cb4:	a2 e3       	ldi	r26, 0x32	; 50
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e2 e3       	ldi	r30, 0x32	; 50
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	81 60       	ori	r24, 0x01	; 1
     cc0:	8c 93       	st	X, r24
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <frontIRread>:

char frontIRread(void) {
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	0f 92       	push	r0
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	if (IR_SEN_PIN & (1<<IR_FRONT_SEN_PIN)) {
     cd2:	e0 e3       	ldi	r30, 0x30	; 48
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 71       	andi	r24, 0x10	; 16
     cde:	90 70       	andi	r25, 0x00	; 0
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	19 f0       	breq	.+6      	; 0xcea <frontIRread+0x22>
		return 1;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <frontIRread+0x24>
	}
	else
		return 0;
     cea:	19 82       	std	Y+1, r1	; 0x01
     cec:	89 81       	ldd	r24, Y+1	; 0x01
}
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <backIRread>:

char backIRread(void) {
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
	if (IR_SEN_PIN & (1<<IR_BACK_SEN_PIN)) {
     d00:	e0 e3       	ldi	r30, 0x30	; 48
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	84 70       	andi	r24, 0x04	; 4
     d0c:	90 70       	andi	r25, 0x00	; 0
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	19 f0       	breq	.+6      	; 0xd18 <backIRread+0x22>
		return 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <backIRread+0x24>
	}
	else
		return 0;
     d18:	19 82       	std	Y+1, r1	; 0x01
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <LCD_init>:
#include "LCD.h"

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void) {
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW);	/* Control pins(E,RS,RW) -> output pins */
     d2c:	a4 e3       	ldi	r26, 0x34	; 52
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e4 e3       	ldi	r30, 0x34	; 52
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8e 60       	ori	r24, 0x0E	; 14
     d38:	8c 93       	st	X, r24

#if (DATA_BITS_MODE == 4)					/* Check mode of LCD if 8 or 4 */
#ifdef UPPER_PORT_PINS						/* Check if LCD connected to (0,1,2,3)PINS or (4,5,6,7)PINS */
	LCD_DATA_PORT_DIR |= 0xF0;				/* The highest 4 bits of the data port -> output pins */
     d3a:	a4 e3       	ldi	r26, 0x34	; 52
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e4 e3       	ldi	r30, 0x34	; 52
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 6f       	ori	r24, 0xF0	; 240
     d46:	8c 93       	st	X, r24
#else
	LCD_DATA_PORT_DIR |= 0x0F;				/* The lowest 4 bits of the data port -> output pins */
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE);			/* Initialize LCD 4-bit mode */
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);	/* Use 2-line LCD + 4-bit Data Mode + 5*7 dot display Mode */
     d4e:	88 e2       	ldi	r24, 0x28	; 40
     d50:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_sendCommand>
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR = 0xFF;						/* Data port -> output port */
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);	/* Use 2-line LCD + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(CURSOR_OFF);
     d54:	8c e0       	ldi	r24, 0x0C	; 12
     d56:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);		/* Clear LCD at the beginning */
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_sendCommand>
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command) {
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	c3 56       	subi	r28, 0x63	; 99
     d74:	d0 40       	sbci	r29, 0x00	; 0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	fe 01       	movw	r30, r28
     d82:	ed 59       	subi	r30, 0x9D	; 157
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS);		/* Command Mode RS=0 */
     d88:	a5 e3       	ldi	r26, 0x35	; 53
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e5 e3       	ldi	r30, 0x35	; 53
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8b 7f       	andi	r24, 0xFB	; 251
     d94:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);		/* Write data (RW=0) */
     d96:	a5 e3       	ldi	r26, 0x35	; 53
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e5 e3       	ldi	r30, 0x35	; 53
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	8d 7f       	andi	r24, 0xFD	; 253
     da2:	8c 93       	st	X, r24
     da4:	fe 01       	movw	r30, r28
     da6:	e1 5a       	subi	r30, 0xA1	; 161
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e8       	ldi	r26, 0x80	; 128
     db0:	bf e3       	ldi	r27, 0x3F	; 63
     db2:	80 83       	st	Z, r24
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	a2 83       	std	Z+2, r26	; 0x02
     db8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	8e 01       	movw	r16, r28
     dbc:	05 5a       	subi	r16, 0xA5	; 165
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	fe 01       	movw	r30, r28
     dc2:	e1 5a       	subi	r30, 0xA1	; 161
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	60 81       	ld	r22, Z
     dc8:	71 81       	ldd	r23, Z+1	; 0x01
     dca:	82 81       	ldd	r24, Z+2	; 0x02
     dcc:	93 81       	ldd	r25, Z+3	; 0x03
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	4a e7       	ldi	r20, 0x7A	; 122
     dd4:	53 e4       	ldi	r21, 0x43	; 67
     dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	f8 01       	movw	r30, r16
     de0:	80 83       	st	Z, r24
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	a2 83       	std	Z+2, r26	; 0x02
     de6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     de8:	fe 01       	movw	r30, r28
     dea:	e5 5a       	subi	r30, 0xA5	; 165
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	60 81       	ld	r22, Z
     df0:	71 81       	ldd	r23, Z+1	; 0x01
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e8       	ldi	r20, 0x80	; 128
     dfc:	5f e3       	ldi	r21, 0x3F	; 63
     dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e02:	88 23       	and	r24, r24
     e04:	44 f4       	brge	.+16     	; 0xe16 <LCD_sendCommand+0xb0>
		__ticks = 1;
     e06:	fe 01       	movw	r30, r28
     e08:	e7 5a       	subi	r30, 0xA7	; 167
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
     e14:	64 c0       	rjmp	.+200    	; 0xede <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     e16:	fe 01       	movw	r30, r28
     e18:	e5 5a       	subi	r30, 0xA5	; 165
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	60 81       	ld	r22, Z
     e1e:	71 81       	ldd	r23, Z+1	; 0x01
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	93 81       	ldd	r25, Z+3	; 0x03
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	3f ef       	ldi	r19, 0xFF	; 255
     e28:	4f e7       	ldi	r20, 0x7F	; 127
     e2a:	57 e4       	ldi	r21, 0x47	; 71
     e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e30:	18 16       	cp	r1, r24
     e32:	0c f0       	brlt	.+2      	; 0xe36 <LCD_sendCommand+0xd0>
     e34:	43 c0       	rjmp	.+134    	; 0xebc <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e36:	fe 01       	movw	r30, r28
     e38:	e1 5a       	subi	r30, 0xA1	; 161
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	8e 01       	movw	r16, r28
     e56:	07 5a       	subi	r16, 0xA7	; 167
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	bc 01       	movw	r22, r24
     e5c:	cd 01       	movw	r24, r26
     e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	f8 01       	movw	r30, r16
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	1f c0       	rjmp	.+62     	; 0xeac <LCD_sendCommand+0x146>
     e6e:	fe 01       	movw	r30, r28
     e70:	e9 5a       	subi	r30, 0xA9	; 169
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	89 e1       	ldi	r24, 0x19	; 25
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e7c:	fe 01       	movw	r30, r28
     e7e:	e9 5a       	subi	r30, 0xA9	; 169
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCD_sendCommand+0x120>
     e8a:	fe 01       	movw	r30, r28
     e8c:	e9 5a       	subi	r30, 0xA9	; 169
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	de 01       	movw	r26, r28
     e96:	a7 5a       	subi	r26, 0xA7	; 167
     e98:	bf 4f       	sbci	r27, 0xFF	; 255
     e9a:	fe 01       	movw	r30, r28
     e9c:	e7 5a       	subi	r30, 0xA7	; 167
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	9c 93       	st	X, r25
     eaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	fe 01       	movw	r30, r28
     eae:	e7 5a       	subi	r30, 0xA7	; 167
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	d1 f6       	brne	.-76     	; 0xe6e <LCD_sendCommand+0x108>
     eba:	27 c0       	rjmp	.+78     	; 0xf0a <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	8e 01       	movw	r16, r28
     ebe:	07 5a       	subi	r16, 0xA7	; 167
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
     ec2:	fe 01       	movw	r30, r28
     ec4:	e5 5a       	subi	r30, 0xA5	; 165
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	93 81       	ldd	r25, Z+3	; 0x03
     ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	f8 01       	movw	r30, r16
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	80 83       	st	Z, r24
     ede:	de 01       	movw	r26, r28
     ee0:	ab 5a       	subi	r26, 0xAB	; 171
     ee2:	bf 4f       	sbci	r27, 0xFF	; 255
     ee4:	fe 01       	movw	r30, r28
     ee6:	e7 5a       	subi	r30, 0xA7	; 167
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	80 81       	ld	r24, Z
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	8d 93       	st	X+, r24
     ef0:	9c 93       	st	X, r25
     ef2:	fe 01       	movw	r30, r28
     ef4:	eb 5a       	subi	r30, 0xAB	; 171
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <LCD_sendCommand+0x196>
     f00:	fe 01       	movw	r30, r28
     f02:	eb 5a       	subi	r30, 0xAB	; 171
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	91 83       	std	Z+1, r25	; 0x01
     f08:	80 83       	st	Z, r24
	_delay_ms(1);						/* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E);			/* Enable LCD E=1 */
     f0a:	a5 e3       	ldi	r26, 0x35	; 53
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e5 e3       	ldi	r30, 0x35	; 53
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 60       	ori	r24, 0x08	; 8
     f16:	8c 93       	st	X, r24
     f18:	fe 01       	movw	r30, r28
     f1a:	ef 5a       	subi	r30, 0xAF	; 175
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a0 e8       	ldi	r26, 0x80	; 128
     f24:	bf e3       	ldi	r27, 0x3F	; 63
     f26:	80 83       	st	Z, r24
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	a2 83       	std	Z+2, r26	; 0x02
     f2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2e:	8e 01       	movw	r16, r28
     f30:	03 5b       	subi	r16, 0xB3	; 179
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	fe 01       	movw	r30, r28
     f36:	ef 5a       	subi	r30, 0xAF	; 175
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4a e7       	ldi	r20, 0x7A	; 122
     f48:	53 e4       	ldi	r21, 0x43	; 67
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	f8 01       	movw	r30, r16
     f54:	80 83       	st	Z, r24
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	a2 83       	std	Z+2, r26	; 0x02
     f5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f5c:	fe 01       	movw	r30, r28
     f5e:	e3 5b       	subi	r30, 0xB3	; 179
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	60 81       	ld	r22, Z
     f64:	71 81       	ldd	r23, Z+1	; 0x01
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e8       	ldi	r20, 0x80	; 128
     f70:	5f e3       	ldi	r21, 0x3F	; 63
     f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f76:	88 23       	and	r24, r24
     f78:	44 f4       	brge	.+16     	; 0xf8a <LCD_sendCommand+0x224>
		__ticks = 1;
     f7a:	fe 01       	movw	r30, r28
     f7c:	e5 5b       	subi	r30, 0xB5	; 181
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	91 83       	std	Z+1, r25	; 0x01
     f86:	80 83       	st	Z, r24
     f88:	64 c0       	rjmp	.+200    	; 0x1052 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     f8a:	fe 01       	movw	r30, r28
     f8c:	e3 5b       	subi	r30, 0xB3	; 179
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	4f e7       	ldi	r20, 0x7F	; 127
     f9e:	57 e4       	ldi	r21, 0x47	; 71
     fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	0c f0       	brlt	.+2      	; 0xfaa <LCD_sendCommand+0x244>
     fa8:	43 c0       	rjmp	.+134    	; 0x1030 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     faa:	fe 01       	movw	r30, r28
     fac:	ef 5a       	subi	r30, 0xAF	; 175
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	8e 01       	movw	r16, r28
     fca:	05 5b       	subi	r16, 0xB5	; 181
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	f8 01       	movw	r30, r16
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
     fe0:	1f c0       	rjmp	.+62     	; 0x1020 <LCD_sendCommand+0x2ba>
     fe2:	fe 01       	movw	r30, r28
     fe4:	e7 5b       	subi	r30, 0xB7	; 183
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	89 e1       	ldi	r24, 0x19	; 25
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	91 83       	std	Z+1, r25	; 0x01
     fee:	80 83       	st	Z, r24
     ff0:	fe 01       	movw	r30, r28
     ff2:	e7 5b       	subi	r30, 0xB7	; 183
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <LCD_sendCommand+0x294>
     ffe:	fe 01       	movw	r30, r28
    1000:	e7 5b       	subi	r30, 0xB7	; 183
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1008:	de 01       	movw	r26, r28
    100a:	a5 5b       	subi	r26, 0xB5	; 181
    100c:	bf 4f       	sbci	r27, 0xFF	; 255
    100e:	fe 01       	movw	r30, r28
    1010:	e5 5b       	subi	r30, 0xB5	; 181
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	11 96       	adiw	r26, 0x01	; 1
    101c:	9c 93       	st	X, r25
    101e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	fe 01       	movw	r30, r28
    1022:	e5 5b       	subi	r30, 0xB5	; 181
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	d1 f6       	brne	.-76     	; 0xfe2 <LCD_sendCommand+0x27c>
    102e:	27 c0       	rjmp	.+78     	; 0x107e <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1030:	8e 01       	movw	r16, r28
    1032:	05 5b       	subi	r16, 0xB5	; 181
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	fe 01       	movw	r30, r28
    1038:	e3 5b       	subi	r30, 0xB3	; 179
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	60 81       	ld	r22, Z
    103e:	71 81       	ldd	r23, Z+1	; 0x01
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	f8 01       	movw	r30, r16
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
    1052:	de 01       	movw	r26, r28
    1054:	a9 5b       	subi	r26, 0xB9	; 185
    1056:	bf 4f       	sbci	r27, 0xFF	; 255
    1058:	fe 01       	movw	r30, r28
    105a:	e5 5b       	subi	r30, 0xB5	; 181
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	8d 93       	st	X+, r24
    1064:	9c 93       	st	X, r25
    1066:	fe 01       	movw	r30, r28
    1068:	e9 5b       	subi	r30, 0xB9	; 185
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <LCD_sendCommand+0x30a>
    1074:	fe 01       	movw	r30, r28
    1076:	e9 5b       	subi	r30, 0xB9	; 185
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24

#if (DATA_BITS_MODE == 4)				/* 4-bits mode */
	/* In 4 bit mode we send the higher 4 bits of the command first then the lower */
	/* Out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    107e:	a5 e3       	ldi	r26, 0x35	; 53
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e5 e3       	ldi	r30, 0x35	; 53
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	98 2f       	mov	r25, r24
    108a:	9f 70       	andi	r25, 0x0F	; 15
    108c:	fe 01       	movw	r30, r28
    108e:	ed 59       	subi	r30, 0x9D	; 157
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 81       	ld	r24, Z
    1094:	80 7f       	andi	r24, 0xF0	; 240
    1096:	89 2b       	or	r24, r25
    1098:	8c 93       	st	X, r24
    109a:	fe 01       	movw	r30, r28
    109c:	ed 5b       	subi	r30, 0xBD	; 189
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a0 e8       	ldi	r26, 0x80	; 128
    10a6:	bf e3       	ldi	r27, 0x3F	; 63
    10a8:	80 83       	st	Z, r24
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	a2 83       	std	Z+2, r26	; 0x02
    10ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b0:	8e 01       	movw	r16, r28
    10b2:	01 5c       	subi	r16, 0xC1	; 193
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	fe 01       	movw	r30, r28
    10b8:	ed 5b       	subi	r30, 0xBD	; 189
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4a e7       	ldi	r20, 0x7A	; 122
    10ca:	53 e4       	ldi	r21, 0x43	; 67
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	f8 01       	movw	r30, r16
    10d6:	80 83       	st	Z, r24
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	a2 83       	std	Z+2, r26	; 0x02
    10dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10de:	fe 01       	movw	r30, r28
    10e0:	ff 96       	adiw	r30, 0x3f	; 63
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e8       	ldi	r20, 0x80	; 128
    10f0:	5f e3       	ldi	r21, 0x3F	; 63
    10f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10f6:	88 23       	and	r24, r24
    10f8:	2c f4       	brge	.+10     	; 0x1104 <LCD_sendCommand+0x39e>
		__ticks = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9e af       	std	Y+62, r25	; 0x3e
    1100:	8d af       	std	Y+61, r24	; 0x3d
    1102:	46 c0       	rjmp	.+140    	; 0x1190 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1104:	fe 01       	movw	r30, r28
    1106:	ff 96       	adiw	r30, 0x3f	; 63
    1108:	60 81       	ld	r22, Z
    110a:	71 81       	ldd	r23, Z+1	; 0x01
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	93 81       	ldd	r25, Z+3	; 0x03
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	4f e7       	ldi	r20, 0x7F	; 127
    1116:	57 e4       	ldi	r21, 0x47	; 71
    1118:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    111c:	18 16       	cp	r1, r24
    111e:	64 f5       	brge	.+88     	; 0x1178 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1120:	fe 01       	movw	r30, r28
    1122:	ed 5b       	subi	r30, 0xBD	; 189
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e2       	ldi	r20, 0x20	; 32
    1134:	51 e4       	ldi	r21, 0x41	; 65
    1136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9e af       	std	Y+62, r25	; 0x3e
    114c:	8d af       	std	Y+61, r24	; 0x3d
    114e:	0f c0       	rjmp	.+30     	; 0x116e <LCD_sendCommand+0x408>
    1150:	89 e1       	ldi	r24, 0x19	; 25
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9c af       	std	Y+60, r25	; 0x3c
    1156:	8b af       	std	Y+59, r24	; 0x3b
    1158:	8b ad       	ldd	r24, Y+59	; 0x3b
    115a:	9c ad       	ldd	r25, Y+60	; 0x3c
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <LCD_sendCommand+0x3f6>
    1160:	9c af       	std	Y+60, r25	; 0x3c
    1162:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1164:	8d ad       	ldd	r24, Y+61	; 0x3d
    1166:	9e ad       	ldd	r25, Y+62	; 0x3e
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	9e af       	std	Y+62, r25	; 0x3e
    116c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1170:	9e ad       	ldd	r25, Y+62	; 0x3e
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	69 f7       	brne	.-38     	; 0x1150 <LCD_sendCommand+0x3ea>
    1176:	16 c0       	rjmp	.+44     	; 0x11a4 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1178:	fe 01       	movw	r30, r28
    117a:	ff 96       	adiw	r30, 0x3f	; 63
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	9e af       	std	Y+62, r25	; 0x3e
    118e:	8d af       	std	Y+61, r24	; 0x3d
    1190:	8d ad       	ldd	r24, Y+61	; 0x3d
    1192:	9e ad       	ldd	r25, Y+62	; 0x3e
    1194:	9a af       	std	Y+58, r25	; 0x3a
    1196:	89 af       	std	Y+57, r24	; 0x39
    1198:	89 ad       	ldd	r24, Y+57	; 0x39
    119a:	9a ad       	ldd	r25, Y+58	; 0x3a
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <LCD_sendCommand+0x436>
    11a0:	9a af       	std	Y+58, r25	; 0x3a
    11a2:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1);					/* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E);		/* Disable LCD E=0 */
    11a4:	a5 e3       	ldi	r26, 0x35	; 53
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e5 e3       	ldi	r30, 0x35	; 53
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	87 7f       	andi	r24, 0xF7	; 247
    11b0:	8c 93       	st	X, r24
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a0 e8       	ldi	r26, 0x80	; 128
    11b8:	bf e3       	ldi	r27, 0x3F	; 63
    11ba:	8d ab       	std	Y+53, r24	; 0x35
    11bc:	9e ab       	std	Y+54, r25	; 0x36
    11be:	af ab       	std	Y+55, r26	; 0x37
    11c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	6d a9       	ldd	r22, Y+53	; 0x35
    11c4:	7e a9       	ldd	r23, Y+54	; 0x36
    11c6:	8f a9       	ldd	r24, Y+55	; 0x37
    11c8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a e7       	ldi	r20, 0x7A	; 122
    11d0:	53 e4       	ldi	r21, 0x43	; 67
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	89 ab       	std	Y+49, r24	; 0x31
    11dc:	9a ab       	std	Y+50, r25	; 0x32
    11de:	ab ab       	std	Y+51, r26	; 0x33
    11e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11e2:	69 a9       	ldd	r22, Y+49	; 0x31
    11e4:	7a a9       	ldd	r23, Y+50	; 0x32
    11e6:	8b a9       	ldd	r24, Y+51	; 0x33
    11e8:	9c a9       	ldd	r25, Y+52	; 0x34
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <LCD_sendCommand+0x49e>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	98 ab       	std	Y+48, r25	; 0x30
    1200:	8f a7       	std	Y+47, r24	; 0x2f
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1204:	69 a9       	ldd	r22, Y+49	; 0x31
    1206:	7a a9       	ldd	r23, Y+50	; 0x32
    1208:	8b a9       	ldd	r24, Y+51	; 0x33
    120a:	9c a9       	ldd	r25, Y+52	; 0x34
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	4c f5       	brge	.+82     	; 0x126e <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	6d a9       	ldd	r22, Y+53	; 0x35
    121e:	7e a9       	ldd	r23, Y+54	; 0x36
    1220:	8f a9       	ldd	r24, Y+55	; 0x37
    1222:	98 ad       	ldd	r25, Y+56	; 0x38
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	98 ab       	std	Y+48, r25	; 0x30
    1242:	8f a7       	std	Y+47, r24	; 0x2f
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <LCD_sendCommand+0x4fe>
    1246:	89 e1       	ldi	r24, 0x19	; 25
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9e a7       	std	Y+46, r25	; 0x2e
    124c:	8d a7       	std	Y+45, r24	; 0x2d
    124e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1250:	9e a5       	ldd	r25, Y+46	; 0x2e
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <LCD_sendCommand+0x4ec>
    1256:	9e a7       	std	Y+46, r25	; 0x2e
    1258:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	8f a5       	ldd	r24, Y+47	; 0x2f
    125c:	98 a9       	ldd	r25, Y+48	; 0x30
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	98 ab       	std	Y+48, r25	; 0x30
    1262:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	8f a5       	ldd	r24, Y+47	; 0x2f
    1266:	98 a9       	ldd	r25, Y+48	; 0x30
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	69 f7       	brne	.-38     	; 0x1246 <LCD_sendCommand+0x4e0>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	69 a9       	ldd	r22, Y+49	; 0x31
    1270:	7a a9       	ldd	r23, Y+50	; 0x32
    1272:	8b a9       	ldd	r24, Y+51	; 0x33
    1274:	9c a9       	ldd	r25, Y+52	; 0x34
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	98 ab       	std	Y+48, r25	; 0x30
    1280:	8f a7       	std	Y+47, r24	; 0x2f
    1282:	8f a5       	ldd	r24, Y+47	; 0x2f
    1284:	98 a9       	ldd	r25, Y+48	; 0x30
    1286:	9c a7       	std	Y+44, r25	; 0x2c
    1288:	8b a7       	std	Y+43, r24	; 0x2b
    128a:	8b a5       	ldd	r24, Y+43	; 0x2b
    128c:	9c a5       	ldd	r25, Y+44	; 0x2c
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <LCD_sendCommand+0x528>
    1292:	9c a7       	std	Y+44, r25	; 0x2c
    1294:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);					/* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E);		/* Enable LCD E=1 */
    1296:	a5 e3       	ldi	r26, 0x35	; 53
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e5 e3       	ldi	r30, 0x35	; 53
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	88 60       	ori	r24, 0x08	; 8
    12a2:	8c 93       	st	X, r24
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e8       	ldi	r26, 0x80	; 128
    12aa:	bf e3       	ldi	r27, 0x3F	; 63
    12ac:	8f a3       	std	Y+39, r24	; 0x27
    12ae:	98 a7       	std	Y+40, r25	; 0x28
    12b0:	a9 a7       	std	Y+41, r26	; 0x29
    12b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b4:	6f a1       	ldd	r22, Y+39	; 0x27
    12b6:	78 a5       	ldd	r23, Y+40	; 0x28
    12b8:	89 a5       	ldd	r24, Y+41	; 0x29
    12ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	4a e7       	ldi	r20, 0x7A	; 122
    12c2:	53 e4       	ldi	r21, 0x43	; 67
    12c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	8b a3       	std	Y+35, r24	; 0x23
    12ce:	9c a3       	std	Y+36, r25	; 0x24
    12d0:	ad a3       	std	Y+37, r26	; 0x25
    12d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12d4:	6b a1       	ldd	r22, Y+35	; 0x23
    12d6:	7c a1       	ldd	r23, Y+36	; 0x24
    12d8:	8d a1       	ldd	r24, Y+37	; 0x25
    12da:	9e a1       	ldd	r25, Y+38	; 0x26
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e8       	ldi	r20, 0x80	; 128
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <LCD_sendCommand+0x590>
		__ticks = 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9a a3       	std	Y+34, r25	; 0x22
    12f2:	89 a3       	std	Y+33, r24	; 0x21
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    12f6:	6b a1       	ldd	r22, Y+35	; 0x23
    12f8:	7c a1       	ldd	r23, Y+36	; 0x24
    12fa:	8d a1       	ldd	r24, Y+37	; 0x25
    12fc:	9e a1       	ldd	r25, Y+38	; 0x26
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	4f e7       	ldi	r20, 0x7F	; 127
    1304:	57 e4       	ldi	r21, 0x47	; 71
    1306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	4c f5       	brge	.+82     	; 0x1360 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    130e:	6f a1       	ldd	r22, Y+39	; 0x27
    1310:	78 a5       	ldd	r23, Y+40	; 0x28
    1312:	89 a5       	ldd	r24, Y+41	; 0x29
    1314:	9a a5       	ldd	r25, Y+42	; 0x2a
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e2       	ldi	r20, 0x20	; 32
    131c:	51 e4       	ldi	r21, 0x41	; 65
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	9a a3       	std	Y+34, r25	; 0x22
    1334:	89 a3       	std	Y+33, r24	; 0x21
    1336:	0f c0       	rjmp	.+30     	; 0x1356 <LCD_sendCommand+0x5f0>
    1338:	89 e1       	ldi	r24, 0x19	; 25
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	98 a3       	std	Y+32, r25	; 0x20
    133e:	8f 8f       	std	Y+31, r24	; 0x1f
    1340:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1342:	98 a1       	ldd	r25, Y+32	; 0x20
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCD_sendCommand+0x5de>
    1348:	98 a3       	std	Y+32, r25	; 0x20
    134a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134c:	89 a1       	ldd	r24, Y+33	; 0x21
    134e:	9a a1       	ldd	r25, Y+34	; 0x22
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	9a a3       	std	Y+34, r25	; 0x22
    1354:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1356:	89 a1       	ldd	r24, Y+33	; 0x21
    1358:	9a a1       	ldd	r25, Y+34	; 0x22
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f7       	brne	.-38     	; 0x1338 <LCD_sendCommand+0x5d2>
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1360:	6b a1       	ldd	r22, Y+35	; 0x23
    1362:	7c a1       	ldd	r23, Y+36	; 0x24
    1364:	8d a1       	ldd	r24, Y+37	; 0x25
    1366:	9e a1       	ldd	r25, Y+38	; 0x26
    1368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	9a a3       	std	Y+34, r25	; 0x22
    1372:	89 a3       	std	Y+33, r24	; 0x21
    1374:	89 a1       	ldd	r24, Y+33	; 0x21
    1376:	9a a1       	ldd	r25, Y+34	; 0x22
    1378:	9e 8f       	std	Y+30, r25	; 0x1e
    137a:	8d 8f       	std	Y+29, r24	; 0x1d
    137c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    137e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <LCD_sendCommand+0x61a>
    1384:	9e 8f       	std	Y+30, r25	; 0x1e
    1386:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					/* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1388:	a5 e3       	ldi	r26, 0x35	; 53
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e5 e3       	ldi	r30, 0x35	; 53
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	28 2f       	mov	r18, r24
    1394:	2f 70       	andi	r18, 0x0F	; 15
    1396:	fe 01       	movw	r30, r28
    1398:	ed 59       	subi	r30, 0x9D	; 157
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 81       	ld	r24, Z
    139e:	88 2f       	mov	r24, r24
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	82 95       	swap	r24
    13a4:	92 95       	swap	r25
    13a6:	90 7f       	andi	r25, 0xF0	; 240
    13a8:	98 27       	eor	r25, r24
    13aa:	80 7f       	andi	r24, 0xF0	; 240
    13ac:	98 27       	eor	r25, r24
    13ae:	82 2b       	or	r24, r18
    13b0:	8c 93       	st	X, r24
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a0 e8       	ldi	r26, 0x80	; 128
    13b8:	bf e3       	ldi	r27, 0x3F	; 63
    13ba:	89 8f       	std	Y+25, r24	; 0x19
    13bc:	9a 8f       	std	Y+26, r25	; 0x1a
    13be:	ab 8f       	std	Y+27, r26	; 0x1b
    13c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c2:	69 8d       	ldd	r22, Y+25	; 0x19
    13c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	4a e7       	ldi	r20, 0x7A	; 122
    13d0:	53 e4       	ldi	r21, 0x43	; 67
    13d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	8d 8b       	std	Y+21, r24	; 0x15
    13dc:	9e 8b       	std	Y+22, r25	; 0x16
    13de:	af 8b       	std	Y+23, r26	; 0x17
    13e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e2:	6d 89       	ldd	r22, Y+21	; 0x15
    13e4:	7e 89       	ldd	r23, Y+22	; 0x16
    13e6:	8f 89       	ldd	r24, Y+23	; 0x17
    13e8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e8       	ldi	r20, 0x80	; 128
    13f0:	5f e3       	ldi	r21, 0x3F	; 63
    13f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f6:	88 23       	and	r24, r24
    13f8:	2c f4       	brge	.+10     	; 0x1404 <LCD_sendCommand+0x69e>
		__ticks = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9c 8b       	std	Y+20, r25	; 0x14
    1400:	8b 8b       	std	Y+19, r24	; 0x13
    1402:	3f c0       	rjmp	.+126    	; 0x1482 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	4f e7       	ldi	r20, 0x7F	; 127
    1412:	57 e4       	ldi	r21, 0x47	; 71
    1414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1418:	18 16       	cp	r1, r24
    141a:	4c f5       	brge	.+82     	; 0x146e <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141c:	69 8d       	ldd	r22, Y+25	; 0x19
    141e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1420:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1422:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e2       	ldi	r20, 0x20	; 32
    142a:	51 e4       	ldi	r21, 0x41	; 65
    142c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9c 8b       	std	Y+20, r25	; 0x14
    1442:	8b 8b       	std	Y+19, r24	; 0x13
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <LCD_sendCommand+0x6fe>
    1446:	89 e1       	ldi	r24, 0x19	; 25
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9a 8b       	std	Y+18, r25	; 0x12
    144c:	89 8b       	std	Y+17, r24	; 0x11
    144e:	89 89       	ldd	r24, Y+17	; 0x11
    1450:	9a 89       	ldd	r25, Y+18	; 0x12
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <LCD_sendCommand+0x6ec>
    1456:	9a 8b       	std	Y+18, r25	; 0x12
    1458:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1464:	8b 89       	ldd	r24, Y+19	; 0x13
    1466:	9c 89       	ldd	r25, Y+20	; 0x14
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	69 f7       	brne	.-38     	; 0x1446 <LCD_sendCommand+0x6e0>
    146c:	14 c0       	rjmp	.+40     	; 0x1496 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	6d 89       	ldd	r22, Y+21	; 0x15
    1470:	7e 89       	ldd	r23, Y+22	; 0x16
    1472:	8f 89       	ldd	r24, Y+23	; 0x17
    1474:	98 8d       	ldd	r25, Y+24	; 0x18
    1476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9c 8b       	std	Y+20, r25	; 0x14
    1480:	8b 8b       	std	Y+19, r24	; 0x13
    1482:	8b 89       	ldd	r24, Y+19	; 0x13
    1484:	9c 89       	ldd	r25, Y+20	; 0x14
    1486:	98 8b       	std	Y+16, r25	; 0x10
    1488:	8f 87       	std	Y+15, r24	; 0x0f
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	98 89       	ldd	r25, Y+16	; 0x10
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <LCD_sendCommand+0x728>
    1492:	98 8b       	std	Y+16, r25	; 0x10
    1494:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif
	_delay_ms(1);					/* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E);		/* Disable LCD E=0 */
    1496:	a5 e3       	ldi	r26, 0x35	; 53
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e5 e3       	ldi	r30, 0x35	; 53
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	87 7f       	andi	r24, 0xF7	; 247
    14a2:	8c 93       	st	X, r24
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e8       	ldi	r26, 0x80	; 128
    14aa:	bf e3       	ldi	r27, 0x3F	; 63
    14ac:	8b 87       	std	Y+11, r24	; 0x0b
    14ae:	9c 87       	std	Y+12, r25	; 0x0c
    14b0:	ad 87       	std	Y+13, r26	; 0x0d
    14b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a e7       	ldi	r20, 0x7A	; 122
    14c2:	53 e4       	ldi	r21, 0x43	; 67
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	98 87       	std	Y+8, r25	; 0x08
    14d0:	a9 87       	std	Y+9, r26	; 0x09
    14d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <LCD_sendCommand+0x790>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <LCD_sendCommand+0x7f0>
    1538:	89 e1       	ldi	r24, 0x19	; 25
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	8b 83       	std	Y+3, r24	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_sendCommand+0x7de>
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <LCD_sendCommand+0x7d2>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_sendCommand+0x81a>
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command;		/* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1);					/* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E);		/* Disable LCD E=0 */
	_delay_ms(1);					/* Delay for processing Th = 13ns */
#endif
}
    1588:	cd 59       	subi	r28, 0x9D	; 157
    158a:	df 4f       	sbci	r29, 0xFF	; 255
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data) {
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	c3 56       	subi	r28, 0x63	; 99
    15ae:	d0 40       	sbci	r29, 0x00	; 0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	fe 01       	movw	r30, r28
    15bc:	ed 59       	subi	r30, 0x9D	; 157
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS);		/* Data Mode RS=1 */
    15c2:	a5 e3       	ldi	r26, 0x35	; 53
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e3       	ldi	r30, 0x35	; 53
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	84 60       	ori	r24, 0x04	; 4
    15ce:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);	/* Write mode RW=0 */
    15d0:	a5 e3       	ldi	r26, 0x35	; 53
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e5 e3       	ldi	r30, 0x35	; 53
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8d 7f       	andi	r24, 0xFD	; 253
    15dc:	8c 93       	st	X, r24
    15de:	fe 01       	movw	r30, r28
    15e0:	e1 5a       	subi	r30, 0xA1	; 161
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e8       	ldi	r26, 0x80	; 128
    15ea:	bf e3       	ldi	r27, 0x3F	; 63
    15ec:	80 83       	st	Z, r24
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	a2 83       	std	Z+2, r26	; 0x02
    15f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f4:	8e 01       	movw	r16, r28
    15f6:	05 5a       	subi	r16, 0xA5	; 165
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	fe 01       	movw	r30, r28
    15fc:	e1 5a       	subi	r30, 0xA1	; 161
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a e7       	ldi	r20, 0x7A	; 122
    160e:	53 e4       	ldi	r21, 0x43	; 67
    1610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	f8 01       	movw	r30, r16
    161a:	80 83       	st	Z, r24
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	a2 83       	std	Z+2, r26	; 0x02
    1620:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1622:	fe 01       	movw	r30, r28
    1624:	e5 5a       	subi	r30, 0xA5	; 165
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	44 f4       	brge	.+16     	; 0x1650 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1640:	fe 01       	movw	r30, r28
    1642:	e7 5a       	subi	r30, 0xA7	; 167
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	80 83       	st	Z, r24
    164e:	64 c0       	rjmp	.+200    	; 0x1718 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1650:	fe 01       	movw	r30, r28
    1652:	e5 5a       	subi	r30, 0xA5	; 165
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    166a:	18 16       	cp	r1, r24
    166c:	0c f0       	brlt	.+2      	; 0x1670 <LCD_displayCharacter+0xd0>
    166e:	43 c0       	rjmp	.+134    	; 0x16f6 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	fe 01       	movw	r30, r28
    1672:	e1 5a       	subi	r30, 0xA1	; 161
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e2       	ldi	r20, 0x20	; 32
    1684:	51 e4       	ldi	r21, 0x41	; 65
    1686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	8e 01       	movw	r16, r28
    1690:	07 5a       	subi	r16, 0xA7	; 167
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	f8 01       	movw	r30, r16
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    16a6:	1f c0       	rjmp	.+62     	; 0x16e6 <LCD_displayCharacter+0x146>
    16a8:	fe 01       	movw	r30, r28
    16aa:	e9 5a       	subi	r30, 0xA9	; 169
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	89 e1       	ldi	r24, 0x19	; 25
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	80 83       	st	Z, r24
    16b6:	fe 01       	movw	r30, r28
    16b8:	e9 5a       	subi	r30, 0xA9	; 169
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCD_displayCharacter+0x120>
    16c4:	fe 01       	movw	r30, r28
    16c6:	e9 5a       	subi	r30, 0xA9	; 169
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ce:	de 01       	movw	r26, r28
    16d0:	a7 5a       	subi	r26, 0xA7	; 167
    16d2:	bf 4f       	sbci	r27, 0xFF	; 255
    16d4:	fe 01       	movw	r30, r28
    16d6:	e7 5a       	subi	r30, 0xA7	; 167
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	11 96       	adiw	r26, 0x01	; 1
    16e2:	9c 93       	st	X, r25
    16e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e6:	fe 01       	movw	r30, r28
    16e8:	e7 5a       	subi	r30, 0xA7	; 167
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	80 81       	ld	r24, Z
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	d1 f6       	brne	.-76     	; 0x16a8 <LCD_displayCharacter+0x108>
    16f4:	27 c0       	rjmp	.+78     	; 0x1744 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f6:	8e 01       	movw	r16, r28
    16f8:	07 5a       	subi	r16, 0xA7	; 167
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	fe 01       	movw	r30, r28
    16fe:	e5 5a       	subi	r30, 0xA5	; 165
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	f8 01       	movw	r30, r16
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	de 01       	movw	r26, r28
    171a:	ab 5a       	subi	r26, 0xAB	; 171
    171c:	bf 4f       	sbci	r27, 0xFF	; 255
    171e:	fe 01       	movw	r30, r28
    1720:	e7 5a       	subi	r30, 0xA7	; 167
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	8d 93       	st	X+, r24
    172a:	9c 93       	st	X, r25
    172c:	fe 01       	movw	r30, r28
    172e:	eb 5a       	subi	r30, 0xAB	; 171
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <LCD_displayCharacter+0x196>
    173a:	fe 01       	movw	r30, r28
    173c:	eb 5a       	subi	r30, 0xAB	; 171
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
	_delay_ms(1);					/* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E);		/* Enable LCD E=1 */
    1744:	a5 e3       	ldi	r26, 0x35	; 53
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e5 e3       	ldi	r30, 0x35	; 53
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	88 60       	ori	r24, 0x08	; 8
    1750:	8c 93       	st	X, r24
    1752:	fe 01       	movw	r30, r28
    1754:	ef 5a       	subi	r30, 0xAF	; 175
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e8       	ldi	r26, 0x80	; 128
    175e:	bf e3       	ldi	r27, 0x3F	; 63
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	8e 01       	movw	r16, r28
    176a:	03 5b       	subi	r16, 0xB3	; 179
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	fe 01       	movw	r30, r28
    1770:	ef 5a       	subi	r30, 0xAF	; 175
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a e7       	ldi	r20, 0x7A	; 122
    1782:	53 e4       	ldi	r21, 0x43	; 67
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1796:	fe 01       	movw	r30, r28
    1798:	e3 5b       	subi	r30, 0xB3	; 179
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	44 f4       	brge	.+16     	; 0x17c4 <LCD_displayCharacter+0x224>
		__ticks = 1;
    17b4:	fe 01       	movw	r30, r28
    17b6:	e5 5b       	subi	r30, 0xB5	; 181
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	64 c0       	rjmp	.+200    	; 0x188c <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    17c4:	fe 01       	movw	r30, r28
    17c6:	e3 5b       	subi	r30, 0xB3	; 179
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <LCD_displayCharacter+0x244>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	fe 01       	movw	r30, r28
    17e6:	ef 5a       	subi	r30, 0xAF	; 175
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8e 01       	movw	r16, r28
    1804:	05 5b       	subi	r16, 0xB5	; 181
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	1f c0       	rjmp	.+62     	; 0x185a <LCD_displayCharacter+0x2ba>
    181c:	fe 01       	movw	r30, r28
    181e:	e7 5b       	subi	r30, 0xB7	; 183
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	89 e1       	ldi	r24, 0x19	; 25
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	fe 01       	movw	r30, r28
    182c:	e7 5b       	subi	r30, 0xB7	; 183
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_displayCharacter+0x294>
    1838:	fe 01       	movw	r30, r28
    183a:	e7 5b       	subi	r30, 0xB7	; 183
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	de 01       	movw	r26, r28
    1844:	a5 5b       	subi	r26, 0xB5	; 181
    1846:	bf 4f       	sbci	r27, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	e5 5b       	subi	r30, 0xB5	; 181
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	9c 93       	st	X, r25
    1858:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	fe 01       	movw	r30, r28
    185c:	e5 5b       	subi	r30, 0xB5	; 181
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	d1 f6       	brne	.-76     	; 0x181c <LCD_displayCharacter+0x27c>
    1868:	27 c0       	rjmp	.+78     	; 0x18b8 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	8e 01       	movw	r16, r28
    186c:	05 5b       	subi	r16, 0xB5	; 181
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	e3 5b       	subi	r30, 0xB3	; 179
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	f8 01       	movw	r30, r16
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	de 01       	movw	r26, r28
    188e:	a9 5b       	subi	r26, 0xB9	; 185
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	e5 5b       	subi	r30, 0xB5	; 181
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	8d 93       	st	X+, r24
    189e:	9c 93       	st	X, r25
    18a0:	fe 01       	movw	r30, r28
    18a2:	e9 5b       	subi	r30, 0xB9	; 185
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_displayCharacter+0x30a>
    18ae:	fe 01       	movw	r30, r28
    18b0:	e9 5b       	subi	r30, 0xB9	; 185
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
	_delay_ms(1);					/* Delay for processing Tpw - Tdws = 190ns */

#if (DATA_BITS_MODE == 4)			/* 4-bits mode */
	/* Out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    18b8:	a5 e3       	ldi	r26, 0x35	; 53
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e5 e3       	ldi	r30, 0x35	; 53
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	98 2f       	mov	r25, r24
    18c4:	9f 70       	andi	r25, 0x0F	; 15
    18c6:	fe 01       	movw	r30, r28
    18c8:	ed 59       	subi	r30, 0x9D	; 157
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 81       	ld	r24, Z
    18ce:	80 7f       	andi	r24, 0xF0	; 240
    18d0:	89 2b       	or	r24, r25
    18d2:	8c 93       	st	X, r24
    18d4:	fe 01       	movw	r30, r28
    18d6:	ed 5b       	subi	r30, 0xBD	; 189
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e8       	ldi	r26, 0x80	; 128
    18e0:	bf e3       	ldi	r27, 0x3F	; 63
    18e2:	80 83       	st	Z, r24
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	a2 83       	std	Z+2, r26	; 0x02
    18e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	8e 01       	movw	r16, r28
    18ec:	01 5c       	subi	r16, 0xC1	; 193
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
    18f0:	fe 01       	movw	r30, r28
    18f2:	ed 5b       	subi	r30, 0xBD	; 189
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a e7       	ldi	r20, 0x7A	; 122
    1904:	53 e4       	ldi	r21, 0x43	; 67
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	f8 01       	movw	r30, r16
    1910:	80 83       	st	Z, r24
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	a2 83       	std	Z+2, r26	; 0x02
    1916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1918:	fe 01       	movw	r30, r28
    191a:	ff 96       	adiw	r30, 0x3f	; 63
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	82 81       	ldd	r24, Z+2	; 0x02
    1922:	93 81       	ldd	r25, Z+3	; 0x03
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9e af       	std	Y+62, r25	; 0x3e
    193a:	8d af       	std	Y+61, r24	; 0x3d
    193c:	46 c0       	rjmp	.+140    	; 0x19ca <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    193e:	fe 01       	movw	r30, r28
    1940:	ff 96       	adiw	r30, 0x3f	; 63
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	64 f5       	brge	.+88     	; 0x19b2 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	fe 01       	movw	r30, r28
    195c:	ed 5b       	subi	r30, 0xBD	; 189
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e af       	std	Y+62, r25	; 0x3e
    1986:	8d af       	std	Y+61, r24	; 0x3d
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <LCD_displayCharacter+0x408>
    198a:	89 e1       	ldi	r24, 0x19	; 25
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9c af       	std	Y+60, r25	; 0x3c
    1990:	8b af       	std	Y+59, r24	; 0x3b
    1992:	8b ad       	ldd	r24, Y+59	; 0x3b
    1994:	9c ad       	ldd	r25, Y+60	; 0x3c
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_displayCharacter+0x3f6>
    199a:	9c af       	std	Y+60, r25	; 0x3c
    199c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9e af       	std	Y+62, r25	; 0x3e
    19a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <LCD_displayCharacter+0x3ea>
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	fe 01       	movw	r30, r28
    19b4:	ff 96       	adiw	r30, 0x3f	; 63
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9e af       	std	Y+62, r25	; 0x3e
    19c8:	8d af       	std	Y+61, r24	; 0x3d
    19ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    19cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ce:	9a af       	std	Y+58, r25	; 0x3a
    19d0:	89 af       	std	Y+57, r24	; 0x39
    19d2:	89 ad       	ldd	r24, Y+57	; 0x39
    19d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <LCD_displayCharacter+0x436>
    19da:	9a af       	std	Y+58, r25	; 0x3a
    19dc:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1);					/* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E);		/* Disable LCD E=0 */
    19de:	a5 e3       	ldi	r26, 0x35	; 53
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e5 e3       	ldi	r30, 0x35	; 53
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	87 7f       	andi	r24, 0xF7	; 247
    19ea:	8c 93       	st	X, r24
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 e8       	ldi	r26, 0x80	; 128
    19f2:	bf e3       	ldi	r27, 0x3F	; 63
    19f4:	8d ab       	std	Y+53, r24	; 0x35
    19f6:	9e ab       	std	Y+54, r25	; 0x36
    19f8:	af ab       	std	Y+55, r26	; 0x37
    19fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6d a9       	ldd	r22, Y+53	; 0x35
    19fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1a00:	8f a9       	ldd	r24, Y+55	; 0x37
    1a02:	98 ad       	ldd	r25, Y+56	; 0x38
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a e7       	ldi	r20, 0x7A	; 122
    1a0a:	53 e4       	ldi	r21, 0x43	; 67
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	89 ab       	std	Y+49, r24	; 0x31
    1a16:	9a ab       	std	Y+50, r25	; 0x32
    1a18:	ab ab       	std	Y+51, r26	; 0x33
    1a1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a20:	8b a9       	ldd	r24, Y+51	; 0x33
    1a22:	9c a9       	ldd	r25, Y+52	; 0x34
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	98 ab       	std	Y+48, r25	; 0x30
    1a3a:	8f a7       	std	Y+47, r24	; 0x2f
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a40:	7a a9       	ldd	r23, Y+50	; 0x32
    1a42:	8b a9       	ldd	r24, Y+51	; 0x33
    1a44:	9c a9       	ldd	r25, Y+52	; 0x34
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6d a9       	ldd	r22, Y+53	; 0x35
    1a58:	7e a9       	ldd	r23, Y+54	; 0x36
    1a5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	98 ab       	std	Y+48, r25	; 0x30
    1a7c:	8f a7       	std	Y+47, r24	; 0x2f
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <LCD_displayCharacter+0x4fe>
    1a80:	89 e1       	ldi	r24, 0x19	; 25
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9e a7       	std	Y+46, r25	; 0x2e
    1a86:	8d a7       	std	Y+45, r24	; 0x2d
    1a88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_displayCharacter+0x4ec>
    1a90:	9e a7       	std	Y+46, r25	; 0x2e
    1a92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a96:	98 a9       	ldd	r25, Y+48	; 0x30
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	98 ab       	std	Y+48, r25	; 0x30
    1a9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <LCD_displayCharacter+0x4e0>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1aac:	8b a9       	ldd	r24, Y+51	; 0x33
    1aae:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	98 ab       	std	Y+48, r25	; 0x30
    1aba:	8f a7       	std	Y+47, r24	; 0x2f
    1abc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1abe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac0:	9c a7       	std	Y+44, r25	; 0x2c
    1ac2:	8b a7       	std	Y+43, r24	; 0x2b
    1ac4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <LCD_displayCharacter+0x528>
    1acc:	9c a7       	std	Y+44, r25	; 0x2c
    1ace:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);					/* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E);		/* Enable LCD E=1 */
    1ad0:	a5 e3       	ldi	r26, 0x35	; 53
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e3       	ldi	r30, 0x35	; 53
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 60       	ori	r24, 0x08	; 8
    1adc:	8c 93       	st	X, r24
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e8       	ldi	r26, 0x80	; 128
    1ae4:	bf e3       	ldi	r27, 0x3F	; 63
    1ae6:	8f a3       	std	Y+39, r24	; 0x27
    1ae8:	98 a7       	std	Y+40, r25	; 0x28
    1aea:	a9 a7       	std	Y+41, r26	; 0x29
    1aec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aee:	6f a1       	ldd	r22, Y+39	; 0x27
    1af0:	78 a5       	ldd	r23, Y+40	; 0x28
    1af2:	89 a5       	ldd	r24, Y+41	; 0x29
    1af4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4a e7       	ldi	r20, 0x7A	; 122
    1afc:	53 e4       	ldi	r21, 0x43	; 67
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8b a3       	std	Y+35, r24	; 0x23
    1b08:	9c a3       	std	Y+36, r25	; 0x24
    1b0a:	ad a3       	std	Y+37, r26	; 0x25
    1b0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b10:	7c a1       	ldd	r23, Y+36	; 0x24
    1b12:	8d a1       	ldd	r24, Y+37	; 0x25
    1b14:	9e a1       	ldd	r25, Y+38	; 0x26
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9a a3       	std	Y+34, r25	; 0x22
    1b2c:	89 a3       	std	Y+33, r24	; 0x21
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1b30:	6b a1       	ldd	r22, Y+35	; 0x23
    1b32:	7c a1       	ldd	r23, Y+36	; 0x24
    1b34:	8d a1       	ldd	r24, Y+37	; 0x25
    1b36:	9e a1       	ldd	r25, Y+38	; 0x26
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	4f e7       	ldi	r20, 0x7F	; 127
    1b3e:	57 e4       	ldi	r21, 0x47	; 71
    1b40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	4c f5       	brge	.+82     	; 0x1b9a <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b48:	6f a1       	ldd	r22, Y+39	; 0x27
    1b4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9a a3       	std	Y+34, r25	; 0x22
    1b6e:	89 a3       	std	Y+33, r24	; 0x21
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <LCD_displayCharacter+0x5f0>
    1b72:	89 e1       	ldi	r24, 0x19	; 25
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	98 a3       	std	Y+32, r25	; 0x20
    1b78:	8f 8f       	std	Y+31, r24	; 0x1f
    1b7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b7c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_displayCharacter+0x5de>
    1b82:	98 a3       	std	Y+32, r25	; 0x20
    1b84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	89 a1       	ldd	r24, Y+33	; 0x21
    1b88:	9a a1       	ldd	r25, Y+34	; 0x22
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	9a a3       	std	Y+34, r25	; 0x22
    1b8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b90:	89 a1       	ldd	r24, Y+33	; 0x21
    1b92:	9a a1       	ldd	r25, Y+34	; 0x22
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <LCD_displayCharacter+0x5d2>
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9a a3       	std	Y+34, r25	; 0x22
    1bac:	89 a3       	std	Y+33, r24	; 0x21
    1bae:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb4:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_displayCharacter+0x61a>
    1bbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					/* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1bc2:	a5 e3       	ldi	r26, 0x35	; 53
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e5 e3       	ldi	r30, 0x35	; 53
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	28 2f       	mov	r18, r24
    1bce:	2f 70       	andi	r18, 0x0F	; 15
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ed 59       	subi	r30, 0x9D	; 157
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	80 81       	ld	r24, Z
    1bd8:	88 2f       	mov	r24, r24
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	82 95       	swap	r24
    1bde:	92 95       	swap	r25
    1be0:	90 7f       	andi	r25, 0xF0	; 240
    1be2:	98 27       	eor	r25, r24
    1be4:	80 7f       	andi	r24, 0xF0	; 240
    1be6:	98 27       	eor	r25, r24
    1be8:	82 2b       	or	r24, r18
    1bea:	8c 93       	st	X, r24
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e8       	ldi	r26, 0x80	; 128
    1bf2:	bf e3       	ldi	r27, 0x3F	; 63
    1bf4:	89 8f       	std	Y+25, r24	; 0x19
    1bf6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bf8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a e7       	ldi	r20, 0x7A	; 122
    1c0a:	53 e4       	ldi	r21, 0x43	; 67
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8d 8b       	std	Y+21, r24	; 0x15
    1c16:	9e 8b       	std	Y+22, r25	; 0x16
    1c18:	af 8b       	std	Y+23, r26	; 0x17
    1c1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 8b       	std	Y+20, r25	; 0x14
    1c3a:	8b 8b       	std	Y+19, r24	; 0x13
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c40:	7e 89       	ldd	r23, Y+22	; 0x16
    1c42:	8f 89       	ldd	r24, Y+23	; 0x17
    1c44:	98 8d       	ldd	r25, Y+24	; 0x18
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	69 8d       	ldd	r22, Y+25	; 0x19
    1c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9c 8b       	std	Y+20, r25	; 0x14
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <LCD_displayCharacter+0x6fe>
    1c80:	89 e1       	ldi	r24, 0x19	; 25
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9a 8b       	std	Y+18, r25	; 0x12
    1c86:	89 8b       	std	Y+17, r24	; 0x11
    1c88:	89 89       	ldd	r24, Y+17	; 0x11
    1c8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_displayCharacter+0x6ec>
    1c90:	9a 8b       	std	Y+18, r25	; 0x12
    1c92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	9c 89       	ldd	r25, Y+20	; 0x14
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <LCD_displayCharacter+0x6e0>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    1caa:	7e 89       	ldd	r23, Y+22	; 0x16
    1cac:	8f 89       	ldd	r24, Y+23	; 0x17
    1cae:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc0:	98 8b       	std	Y+16, r25	; 0x10
    1cc2:	8f 87       	std	Y+15, r24	; 0x0f
    1cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc6:	98 89       	ldd	r25, Y+16	; 0x10
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_displayCharacter+0x728>
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1);					/* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E);		/* Disable LCD E=0 */
    1cd0:	a5 e3       	ldi	r26, 0x35	; 53
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e5 e3       	ldi	r30, 0x35	; 53
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	87 7f       	andi	r24, 0xF7	; 247
    1cdc:	8c 93       	st	X, r24
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e8       	ldi	r26, 0x80	; 128
    1ce4:	bf e3       	ldi	r27, 0x3F	; 63
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	9c 87       	std	Y+12, r25	; 0x0c
    1cea:	ad 87       	std	Y+13, r26	; 0x0d
    1cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a e7       	ldi	r20, 0x7A	; 122
    1cfc:	53 e4       	ldi	r21, 0x43	; 67
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	a9 87       	std	Y+9, r26	; 0x09
    1d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <LCD_displayCharacter+0x790>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <LCD_displayCharacter+0x7f0>
    1d72:	89 e1       	ldi	r24, 0x19	; 25
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_displayCharacter+0x7de>
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <LCD_displayCharacter+0x7d2>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_displayCharacter+0x81a>
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data;			/* Out the data to the data bus D0 --> D7 */
	_delay_ms(1); 					/* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E);		/* Disable LCD E=0 */
	_delay_ms(1);					/* Delay for processing Th = 13ns */
#endif
}
    1dc2:	cd 59       	subi	r28, 0x9D	; 157
    1dc4:	df 4f       	sbci	r29, 0xFF	; 255
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <LCD_displayString>:

void LCD_displayString(const char *Str) {
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <LCD_displayString+0x6>
    1de0:	0f 92       	push	r0
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	9b 83       	std	Y+3, r25	; 0x03
    1de8:	8a 83       	std	Y+2, r24	; 0x02
	/* The idea is to display the characters of the string one by one */
	uint8 i = 0;
    1dea:	19 82       	std	Y+1, r1	; 0x01
    1dec:	0e c0       	rjmp	.+28     	; 0x1e0a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	fc 01       	movw	r30, r24
    1dfa:	e2 0f       	add	r30, r18
    1dfc:	f3 1f       	adc	r31, r19
    1dfe:	80 81       	ld	r24, Z
    1e00:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_displayCharacter>
		i++;
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	8f 5f       	subi	r24, 0xFF	; 255
    1e08:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str) {
	/* The idea is to display the characters of the string one by one */
	uint8 i = 0;
	while(Str[i] != '\0')
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	fc 01       	movw	r30, r24
    1e16:	e2 0f       	add	r30, r18
    1e18:	f3 1f       	adc	r31, r19
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 23       	and	r24, r24
    1e1e:	39 f7       	brne	.-50     	; 0x1dee <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col) {
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <LCD_goToRowColumn+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <LCD_goToRowColumn+0x8>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
    1e3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3d 83       	std	Y+5, r19	; 0x05
    1e46:	2c 83       	std	Y+4, r18	; 0x04
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	91 05       	cpc	r25, r1
    1e50:	c1 f0       	breq	.+48     	; 0x1e82 <LCD_goToRowColumn+0x56>
    1e52:	2c 81       	ldd	r18, Y+4	; 0x04
    1e54:	3d 81       	ldd	r19, Y+5	; 0x05
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <LCD_goToRowColumn+0x3a>
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	61 f0       	breq	.+24     	; 0x1e7c <LCD_goToRowColumn+0x50>
    1e64:	19 c0       	rjmp	.+50     	; 0x1e98 <LCD_goToRowColumn+0x6c>
    1e66:	2c 81       	ldd	r18, Y+4	; 0x04
    1e68:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	69 f0       	breq	.+26     	; 0x1e8a <LCD_goToRowColumn+0x5e>
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	9d 81       	ldd	r25, Y+5	; 0x05
    1e74:	83 30       	cpi	r24, 0x03	; 3
    1e76:	91 05       	cpc	r25, r1
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <LCD_goToRowColumn+0x66>
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address = col;
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	0b c0       	rjmp	.+22     	; 0x1e98 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address = col+0x40;
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	80 5c       	subi	r24, 0xC0	; 192
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	07 c0       	rjmp	.+14     	; 0x1e98 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address = col+0x10;
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	80 5f       	subi	r24, 0xF0	; 240
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	03 c0       	rjmp	.+6      	; 0x1e98 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address = col+0x50;
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	80 5b       	subi	r24, 0xB0	; 176
    1e96:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* To write to a specific address in the LCD
	 * We need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	80 68       	ori	r24, 0x80	; 128
    1e9c:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_sendCommand>
}
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str) {
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <LCD_displayStringRowColumn+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <LCD_displayStringRowColumn+0x8>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	6a 83       	std	Y+2, r22	; 0x02
    1ec0:	5c 83       	std	Y+4, r21	; 0x04
    1ec2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);		/* Go to to the required LCD position */
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ec8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_goToRowColumn>
	LCD_displayString(Str);			/* Display the string */
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <LCD_intgerToString>:

void LCD_intgerToString(int data) {
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	62 97       	sbiw	r28, 0x12	; 18
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	9a 8b       	std	Y+18, r25	; 0x12
    1ef8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];					/* String to hold the ascii result */
   itoa(data,buff,10);				/* 10 for decimal */
    1efa:	89 89       	ldd	r24, Y+17	; 0x11
    1efc:	9a 89       	ldd	r25, Y+18	; 0x12
    1efe:	9e 01       	movw	r18, r28
    1f00:	2f 5f       	subi	r18, 0xFF	; 255
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	b9 01       	movw	r22, r18
    1f06:	4a e0       	ldi	r20, 0x0A	; 10
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <itoa>
   LCD_displayString(buff);
    1f0e:	ce 01       	movw	r24, r28
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
}
    1f16:	62 96       	adiw	r28, 0x12	; 18
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <LCD_clearScreen>:

void LCD_clearScreen(void) {
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);	/* Clear display */
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	0e 94 b3 06 	call	0xd66	; 0xd66 <LCD_sendCommand>
}
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <main>:

#include "Test-1.h"

uint8 F_Obstacle, B_Obstacle;

int main (void) {
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(Switch_DDR,Switch_Pin);
    1f44:	a7 e3       	ldi	r26, 0x37	; 55
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e7 e3       	ldi	r30, 0x37	; 55
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8e 7f       	andi	r24, 0xFE	; 254
    1f50:	8c 93       	st	X, r24
	LCD_init();
    1f52:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_init>
	IRinit();
    1f56:	0e 94 4f 06 	call	0xc9e	; 0xc9e <IRinit>
	init_motors();
    1f5a:	0e 94 df 14 	call	0x29be	; 0x29be <init_motors>
	ULT_init();
    1f5e:	0e 94 86 13 	call	0x270c	; 0x270c <ULT_init>
	Timer2_OV_init ();
    1f62:	0e 94 35 13 	call	0x266a	; 0x266a <Timer2_OV_init>
	while(1){
		if (BIT_IS_CLEAR(Switch_Port,Switch_Pin)){
    1f66:	e8 e3       	ldi	r30, 0x38	; 56
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	81 70       	andi	r24, 0x01	; 1
    1f72:	90 70       	andi	r25, 0x00	; 0
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	19 f4       	brne	.+6      	; 0x1f7e <main+0x42>
			CheckPark();
    1f78:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <CheckPark>
    1f7c:	f4 cf       	rjmp	.-24     	; 0x1f66 <main+0x2a>
		}
		else {
			LCD_clearScreen();
    1f7e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_clearScreen>
			LCD_displayString("Waiting...");
    1f82:	80 e6       	ldi	r24, 0x60	; 96
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
    1f8a:	ed cf       	rjmp	.-38     	; 0x1f66 <main+0x2a>

00001f8c <CheckPark>:
		}
	}
}

static uint8 CheckPark(void) {
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
    1f94:	ae 97       	sbiw	r28, 0x2e	; 46
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
	uint8 park_dist = 0;
    1fa0:	1d a6       	std	Y+45, r1	; 0x2d
	uint16 count = 0;
    1fa2:	1c a6       	std	Y+44, r1	; 0x2c
    1fa4:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_clearScreen();
    1fa6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_clearScreen>
	LCD_displayString("Find Park space");
    1faa:	8b e6       	ldi	r24, 0x6B	; 107
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	aa e7       	ldi	r26, 0x7A	; 122
    1fb8:	b4 e4       	ldi	r27, 0x44	; 68
    1fba:	8f a3       	std	Y+39, r24	; 0x27
    1fbc:	98 a7       	std	Y+40, r25	; 0x28
    1fbe:	a9 a7       	std	Y+41, r26	; 0x29
    1fc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	53 e4       	ldi	r21, 0x43	; 67
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8b a3       	std	Y+35, r24	; 0x23
    1fdc:	9c a3       	std	Y+36, r25	; 0x24
    1fde:	ad a3       	std	Y+37, r26	; 0x25
    1fe0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <CheckPark+0x78>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9a a3       	std	Y+34, r25	; 0x22
    2000:	89 a3       	std	Y+33, r24	; 0x21
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <CheckPark+0xf6>
	else if (__tmp > 65535)
    2004:	6b a1       	ldd	r22, Y+35	; 0x23
    2006:	7c a1       	ldd	r23, Y+36	; 0x24
    2008:	8d a1       	ldd	r24, Y+37	; 0x25
    200a:	9e a1       	ldd	r25, Y+38	; 0x26
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <CheckPark+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6f a1       	ldd	r22, Y+39	; 0x27
    201e:	78 a5       	ldd	r23, Y+40	; 0x28
    2020:	89 a5       	ldd	r24, Y+41	; 0x29
    2022:	9a a5       	ldd	r25, Y+42	; 0x2a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9a a3       	std	Y+34, r25	; 0x22
    2042:	89 a3       	std	Y+33, r24	; 0x21
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <CheckPark+0xd8>
    2046:	89 e1       	ldi	r24, 0x19	; 25
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	98 a3       	std	Y+32, r25	; 0x20
    204c:	8f 8f       	std	Y+31, r24	; 0x1f
    204e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2050:	98 a1       	ldd	r25, Y+32	; 0x20
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <CheckPark+0xc6>
    2056:	98 a3       	std	Y+32, r25	; 0x20
    2058:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	89 a1       	ldd	r24, Y+33	; 0x21
    205c:	9a a1       	ldd	r25, Y+34	; 0x22
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	89 a1       	ldd	r24, Y+33	; 0x21
    2066:	9a a1       	ldd	r25, Y+34	; 0x22
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <CheckPark+0xba>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <CheckPark+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6b a1       	ldd	r22, Y+35	; 0x23
    2070:	7c a1       	ldd	r23, Y+36	; 0x24
    2072:	8d a1       	ldd	r24, Y+37	; 0x25
    2074:	9e a1       	ldd	r25, Y+38	; 0x26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	89 a1       	ldd	r24, Y+33	; 0x21
    2084:	9a a1       	ldd	r25, Y+34	; 0x22
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
    208a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <CheckPark+0x102>
    2092:	9e 8f       	std	Y+30, r25	; 0x1e
    2094:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	MOV_FWR();
    2096:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <MOV_FWR>
	for (count = 0; count< ITERATIONS; count++) {
    209a:	1c a6       	std	Y+44, r1	; 0x2c
    209c:	1b a6       	std	Y+43, r1	; 0x2b
    209e:	9d c0       	rjmp	.+314    	; 0x21da <CheckPark+0x24e>
		if (ULT_calc_dis()> PARKING_DEPTH){
    20a0:	0e 94 a2 13 	call	0x2744	; 0x2744 <ULT_calc_dis>
    20a4:	85 31       	cpi	r24, 0x15	; 21
    20a6:	91 05       	cpc	r25, r1
    20a8:	08 f4       	brcc	.+2      	; 0x20ac <CheckPark+0x120>
    20aa:	91 c0       	rjmp	.+290    	; 0x21ce <CheckPark+0x242>
			if(++park_dist > PARKING_DISTANCE) {
    20ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	8d a7       	std	Y+45, r24	; 0x2d
    20b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    20b4:	89 32       	cpi	r24, 0x29	; 41
    20b6:	58 f0       	brcs	.+22     	; 0x20ce <CheckPark+0x142>
				LCD_clearScreen();
    20b8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_clearScreen>
				LCD_displayString("Parking...");
    20bc:	8b e7       	ldi	r24, 0x7B	; 123
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
				Park();
    20c4:	0e 94 80 11 	call	0x2300	; 0x2300 <Park>
				return 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	8e a7       	std	Y+46, r24	; 0x2e
    20cc:	0f c1       	rjmp	.+542    	; 0x22ec <CheckPark+0x360>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a8 ec       	ldi	r26, 0xC8	; 200
    20d4:	b2 e4       	ldi	r27, 0x42	; 66
    20d6:	89 8f       	std	Y+25, r24	; 0x19
    20d8:	9a 8f       	std	Y+26, r25	; 0x1a
    20da:	ab 8f       	std	Y+27, r26	; 0x1b
    20dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20de:	69 8d       	ldd	r22, Y+25	; 0x19
    20e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	4a e7       	ldi	r20, 0x7A	; 122
    20ec:	53 e4       	ldi	r21, 0x43	; 67
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8d 8b       	std	Y+21, r24	; 0x15
    20f8:	9e 8b       	std	Y+22, r25	; 0x16
    20fa:	af 8b       	std	Y+23, r26	; 0x17
    20fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2100:	7e 89       	ldd	r23, Y+22	; 0x16
    2102:	8f 89       	ldd	r24, Y+23	; 0x17
    2104:	98 8d       	ldd	r25, Y+24	; 0x18
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	2c f4       	brge	.+10     	; 0x2120 <CheckPark+0x194>
		__ticks = 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
    211e:	3f c0       	rjmp	.+126    	; 0x219e <CheckPark+0x212>
	else if (__tmp > 65535)
    2120:	6d 89       	ldd	r22, Y+21	; 0x15
    2122:	7e 89       	ldd	r23, Y+22	; 0x16
    2124:	8f 89       	ldd	r24, Y+23	; 0x17
    2126:	98 8d       	ldd	r25, Y+24	; 0x18
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	3f ef       	ldi	r19, 0xFF	; 255
    212c:	4f e7       	ldi	r20, 0x7F	; 127
    212e:	57 e4       	ldi	r21, 0x47	; 71
    2130:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2134:	18 16       	cp	r1, r24
    2136:	4c f5       	brge	.+82     	; 0x218a <CheckPark+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2138:	69 8d       	ldd	r22, Y+25	; 0x19
    213a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e2       	ldi	r20, 0x20	; 32
    2146:	51 e4       	ldi	r21, 0x41	; 65
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <CheckPark+0x1f4>
    2162:	89 e1       	ldi	r24, 0x19	; 25
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9a 8b       	std	Y+18, r25	; 0x12
    2168:	89 8b       	std	Y+17, r24	; 0x11
    216a:	89 89       	ldd	r24, Y+17	; 0x11
    216c:	9a 89       	ldd	r25, Y+18	; 0x12
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <CheckPark+0x1e2>
    2172:	9a 8b       	std	Y+18, r25	; 0x12
    2174:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2176:	8b 89       	ldd	r24, Y+19	; 0x13
    2178:	9c 89       	ldd	r25, Y+20	; 0x14
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	9c 8b       	std	Y+20, r25	; 0x14
    217e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2180:	8b 89       	ldd	r24, Y+19	; 0x13
    2182:	9c 89       	ldd	r25, Y+20	; 0x14
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	69 f7       	brne	.-38     	; 0x2162 <CheckPark+0x1d6>
    2188:	14 c0       	rjmp	.+40     	; 0x21b2 <CheckPark+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218a:	6d 89       	ldd	r22, Y+21	; 0x15
    218c:	7e 89       	ldd	r23, Y+22	; 0x16
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	98 8d       	ldd	r25, Y+24	; 0x18
    2192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9c 8b       	std	Y+20, r25	; 0x14
    219c:	8b 8b       	std	Y+19, r24	; 0x13
    219e:	8b 89       	ldd	r24, Y+19	; 0x13
    21a0:	9c 89       	ldd	r25, Y+20	; 0x14
    21a2:	98 8b       	std	Y+16, r25	; 0x10
    21a4:	8f 87       	std	Y+15, r24	; 0x0f
    21a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a8:	98 89       	ldd	r25, Y+16	; 0x10
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <CheckPark+0x21e>
    21ae:	98 8b       	std	Y+16, r25	; 0x10
    21b0:	8f 87       	std	Y+15, r24	; 0x0f
			}
			_delay_ms(100); /* 1 step forward */
			LCD_goToRowColumn(1,0);
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_goToRowColumn>
			LCD_displayString("distance = ");
    21ba:	86 e8       	ldi	r24, 0x86	; 134
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
			LCD_intgerToString(park_dist);
    21c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_intgerToString>
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <CheckPark+0x244>
		}
		else {
			park_dist = 0;
    21ce:	1d a6       	std	Y+45, r1	; 0x2d
	uint16 count = 0;
	LCD_clearScreen();
	LCD_displayString("Find Park space");
	_delay_ms(1000);
	MOV_FWR();
	for (count = 0; count< ITERATIONS; count++) {
    21d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	9c a7       	std	Y+44, r25	; 0x2c
    21d8:	8b a7       	std	Y+43, r24	; 0x2b
    21da:	8b a5       	ldd	r24, Y+43	; 0x2b
    21dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21de:	8a 3f       	cpi	r24, 0xFA	; 250
    21e0:	91 05       	cpc	r25, r1
    21e2:	08 f4       	brcc	.+2      	; 0x21e6 <CheckPark+0x25a>
    21e4:	5d cf       	rjmp	.-326    	; 0x20a0 <CheckPark+0x114>
		}
		else {
			park_dist = 0;
		}
	}
	LCD_clearScreen();
    21e6:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_clearScreen>
	LCD_displayString("No Park space ");
    21ea:	82 e9       	ldi	r24, 0x92	; 146
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
	LCD_goToRowColumn(1,0);
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_goToRowColumn>
	LCD_displayString("available");
    21fa:	81 ea       	ldi	r24, 0xA1	; 161
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
	STP();
    2202:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <STP>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	aa e7       	ldi	r26, 0x7A	; 122
    220c:	b4 e4       	ldi	r27, 0x44	; 68
    220e:	8b 87       	std	Y+11, r24	; 0x0b
    2210:	9c 87       	std	Y+12, r25	; 0x0c
    2212:	ad 87       	std	Y+13, r26	; 0x0d
    2214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	6b 85       	ldd	r22, Y+11	; 0x0b
    2218:	7c 85       	ldd	r23, Y+12	; 0x0c
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	9e 85       	ldd	r25, Y+14	; 0x0e
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	4a e7       	ldi	r20, 0x7A	; 122
    2224:	53 e4       	ldi	r21, 0x43	; 67
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	8f 83       	std	Y+7, r24	; 0x07
    2230:	98 87       	std	Y+8, r25	; 0x08
    2232:	a9 87       	std	Y+9, r26	; 0x09
    2234:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2236:	6f 81       	ldd	r22, Y+7	; 0x07
    2238:	78 85       	ldd	r23, Y+8	; 0x08
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e8       	ldi	r20, 0x80	; 128
    2244:	5f e3       	ldi	r21, 0x3F	; 63
    2246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224a:	88 23       	and	r24, r24
    224c:	2c f4       	brge	.+10     	; 0x2258 <CheckPark+0x2cc>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	3f c0       	rjmp	.+126    	; 0x22d6 <CheckPark+0x34a>
	else if (__tmp > 65535)
    2258:	6f 81       	ldd	r22, Y+7	; 0x07
    225a:	78 85       	ldd	r23, Y+8	; 0x08
    225c:	89 85       	ldd	r24, Y+9	; 0x09
    225e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	4c f5       	brge	.+82     	; 0x22c2 <CheckPark+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2270:	6b 85       	ldd	r22, Y+11	; 0x0b
    2272:	7c 85       	ldd	r23, Y+12	; 0x0c
    2274:	8d 85       	ldd	r24, Y+13	; 0x0d
    2276:	9e 85       	ldd	r25, Y+14	; 0x0e
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9e 83       	std	Y+6, r25	; 0x06
    2296:	8d 83       	std	Y+5, r24	; 0x05
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <CheckPark+0x32c>
    229a:	89 e1       	ldi	r24, 0x19	; 25
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9c 83       	std	Y+4, r25	; 0x04
    22a0:	8b 83       	std	Y+3, r24	; 0x03
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <CheckPark+0x31a>
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	69 f7       	brne	.-38     	; 0x229a <CheckPark+0x30e>
    22c0:	14 c0       	rjmp	.+40     	; 0x22ea <CheckPark+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	8d 81       	ldd	r24, Y+5	; 0x05
    22d8:	9e 81       	ldd	r25, Y+6	; 0x06
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <CheckPark+0x356>
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	return 0;
    22ea:	1e a6       	std	Y+46, r1	; 0x2e
    22ec:	8e a5       	ldd	r24, Y+46	; 0x2e
}
    22ee:	ae 96       	adiw	r28, 0x2e	; 46
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <Park>:

static void Park(void) {
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	ac 97       	sbiw	r28, 0x2c	; 44
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
	MOV_FWR();
    2314:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <MOV_FWR>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	aa e7       	ldi	r26, 0x7A	; 122
    231e:	b5 e4       	ldi	r27, 0x45	; 69
    2320:	8f a3       	std	Y+39, r24	; 0x27
    2322:	98 a7       	std	Y+40, r25	; 0x28
    2324:	a9 a7       	std	Y+41, r26	; 0x29
    2326:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	6f a1       	ldd	r22, Y+39	; 0x27
    232a:	78 a5       	ldd	r23, Y+40	; 0x28
    232c:	89 a5       	ldd	r24, Y+41	; 0x29
    232e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a e7       	ldi	r20, 0x7A	; 122
    2336:	53 e4       	ldi	r21, 0x43	; 67
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8b a3       	std	Y+35, r24	; 0x23
    2342:	9c a3       	std	Y+36, r25	; 0x24
    2344:	ad a3       	std	Y+37, r26	; 0x25
    2346:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2348:	6b a1       	ldd	r22, Y+35	; 0x23
    234a:	7c a1       	ldd	r23, Y+36	; 0x24
    234c:	8d a1       	ldd	r24, Y+37	; 0x25
    234e:	9e a1       	ldd	r25, Y+38	; 0x26
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <Park+0x6a>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9a a3       	std	Y+34, r25	; 0x22
    2366:	89 a3       	std	Y+33, r24	; 0x21
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <Park+0xe8>
	else if (__tmp > 65535)
    236a:	6b a1       	ldd	r22, Y+35	; 0x23
    236c:	7c a1       	ldd	r23, Y+36	; 0x24
    236e:	8d a1       	ldd	r24, Y+37	; 0x25
    2370:	9e a1       	ldd	r25, Y+38	; 0x26
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <Park+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	6f a1       	ldd	r22, Y+39	; 0x27
    2384:	78 a5       	ldd	r23, Y+40	; 0x28
    2386:	89 a5       	ldd	r24, Y+41	; 0x29
    2388:	9a a5       	ldd	r25, Y+42	; 0x2a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9a a3       	std	Y+34, r25	; 0x22
    23a8:	89 a3       	std	Y+33, r24	; 0x21
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <Park+0xca>
    23ac:	89 e1       	ldi	r24, 0x19	; 25
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	98 a3       	std	Y+32, r25	; 0x20
    23b2:	8f 8f       	std	Y+31, r24	; 0x1f
    23b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b6:	98 a1       	ldd	r25, Y+32	; 0x20
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <Park+0xb8>
    23bc:	98 a3       	std	Y+32, r25	; 0x20
    23be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	89 a1       	ldd	r24, Y+33	; 0x21
    23c2:	9a a1       	ldd	r25, Y+34	; 0x22
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9a a3       	std	Y+34, r25	; 0x22
    23c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	89 a1       	ldd	r24, Y+33	; 0x21
    23cc:	9a a1       	ldd	r25, Y+34	; 0x22
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <Park+0xac>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <Park+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6b a1       	ldd	r22, Y+35	; 0x23
    23d6:	7c a1       	ldd	r23, Y+36	; 0x24
    23d8:	8d a1       	ldd	r24, Y+37	; 0x25
    23da:	9e a1       	ldd	r25, Y+38	; 0x26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9a a3       	std	Y+34, r25	; 0x22
    23e6:	89 a3       	std	Y+33, r24	; 0x21
    23e8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ea:	9a a1       	ldd	r25, Y+34	; 0x22
    23ec:	9e 8f       	std	Y+30, r25	; 0x1e
    23ee:	8d 8f       	std	Y+29, r24	; 0x1d
    23f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <Park+0xf4>
    23f8:	9e 8f       	std	Y+30, r25	; 0x1e
    23fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(4000);
	STP();
    23fc:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <STP>
	LCD_goToRowColumn(1,0);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_goToRowColumn>
	LCD_displayString("Parking...");
    2408:	8b e7       	ldi	r24, 0x7B	; 123
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
	MOV_LEF_BCK();
    2410:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <MOV_LEF_BCK>
	int i = 0;
    2414:	1c a6       	std	Y+44, r1	; 0x2c
    2416:	1b a6       	std	Y+43, r1	; 0x2b
    2418:	84 c0       	rjmp	.+264    	; 0x2522 <Park+0x222>
	while (i < 100) { //100 need change on hardware
		if (F_Obstacle != 0 && B_Obstacle != 0) { //no Obstacle behind or in front of the car depending on the IR sensors
    241a:	80 91 c5 00 	lds	r24, 0x00C5
    241e:	88 23       	and	r24, r24
    2420:	61 f0       	breq	.+24     	; 0x243a <Park+0x13a>
    2422:	80 91 c4 00 	lds	r24, 0x00C4
    2426:	88 23       	and	r24, r24
    2428:	41 f0       	breq	.+16     	; 0x243a <Park+0x13a>
			MOV_LEF_BCK();
    242a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <MOV_LEF_BCK>
			i++;
    242e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2430:	9c a5       	ldd	r25, Y+44	; 0x2c
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	9c a7       	std	Y+44, r25	; 0x2c
    2436:	8b a7       	std	Y+43, r24	; 0x2b
    2438:	02 c0       	rjmp	.+4      	; 0x243e <Park+0x13e>
		}
		else {
			STP();
    243a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <STP>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a8 ec       	ldi	r26, 0xC8	; 200
    2444:	b2 e4       	ldi	r27, 0x42	; 66
    2446:	89 8f       	std	Y+25, r24	; 0x19
    2448:	9a 8f       	std	Y+26, r25	; 0x1a
    244a:	ab 8f       	std	Y+27, r26	; 0x1b
    244c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	69 8d       	ldd	r22, Y+25	; 0x19
    2450:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2454:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4a e7       	ldi	r20, 0x7A	; 122
    245c:	53 e4       	ldi	r21, 0x43	; 67
    245e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	8d 8b       	std	Y+21, r24	; 0x15
    2468:	9e 8b       	std	Y+22, r25	; 0x16
    246a:	af 8b       	std	Y+23, r26	; 0x17
    246c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    246e:	6d 89       	ldd	r22, Y+21	; 0x15
    2470:	7e 89       	ldd	r23, Y+22	; 0x16
    2472:	8f 89       	ldd	r24, Y+23	; 0x17
    2474:	98 8d       	ldd	r25, Y+24	; 0x18
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e8       	ldi	r20, 0x80	; 128
    247c:	5f e3       	ldi	r21, 0x3F	; 63
    247e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2482:	88 23       	and	r24, r24
    2484:	2c f4       	brge	.+10     	; 0x2490 <Park+0x190>
		__ticks = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9c 8b       	std	Y+20, r25	; 0x14
    248c:	8b 8b       	std	Y+19, r24	; 0x13
    248e:	3f c0       	rjmp	.+126    	; 0x250e <Park+0x20e>
	else if (__tmp > 65535)
    2490:	6d 89       	ldd	r22, Y+21	; 0x15
    2492:	7e 89       	ldd	r23, Y+22	; 0x16
    2494:	8f 89       	ldd	r24, Y+23	; 0x17
    2496:	98 8d       	ldd	r25, Y+24	; 0x18
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	3f ef       	ldi	r19, 0xFF	; 255
    249c:	4f e7       	ldi	r20, 0x7F	; 127
    249e:	57 e4       	ldi	r21, 0x47	; 71
    24a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a4:	18 16       	cp	r1, r24
    24a6:	4c f5       	brge	.+82     	; 0x24fa <Park+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	69 8d       	ldd	r22, Y+25	; 0x19
    24aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	0f c0       	rjmp	.+30     	; 0x24f0 <Park+0x1f0>
    24d2:	89 e1       	ldi	r24, 0x19	; 25
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9a 8b       	std	Y+18, r25	; 0x12
    24d8:	89 8b       	std	Y+17, r24	; 0x11
    24da:	89 89       	ldd	r24, Y+17	; 0x11
    24dc:	9a 89       	ldd	r25, Y+18	; 0x12
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <Park+0x1de>
    24e2:	9a 8b       	std	Y+18, r25	; 0x12
    24e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	8b 89       	ldd	r24, Y+19	; 0x13
    24e8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	9c 8b       	std	Y+20, r25	; 0x14
    24ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	8b 89       	ldd	r24, Y+19	; 0x13
    24f2:	9c 89       	ldd	r25, Y+20	; 0x14
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	69 f7       	brne	.-38     	; 0x24d2 <Park+0x1d2>
    24f8:	14 c0       	rjmp	.+40     	; 0x2522 <Park+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fa:	6d 89       	ldd	r22, Y+21	; 0x15
    24fc:	7e 89       	ldd	r23, Y+22	; 0x16
    24fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2500:	98 8d       	ldd	r25, Y+24	; 0x18
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9c 8b       	std	Y+20, r25	; 0x14
    250c:	8b 8b       	std	Y+19, r24	; 0x13
    250e:	8b 89       	ldd	r24, Y+19	; 0x13
    2510:	9c 89       	ldd	r25, Y+20	; 0x14
    2512:	98 8b       	std	Y+16, r25	; 0x10
    2514:	8f 87       	std	Y+15, r24	; 0x0f
    2516:	8f 85       	ldd	r24, Y+15	; 0x0f
    2518:	98 89       	ldd	r25, Y+16	; 0x10
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <Park+0x21a>
    251e:	98 8b       	std	Y+16, r25	; 0x10
    2520:	8f 87       	std	Y+15, r24	; 0x0f
	STP();
	LCD_goToRowColumn(1,0);
	LCD_displayString("Parking...");
	MOV_LEF_BCK();
	int i = 0;
	while (i < 100) { //100 need change on hardware
    2522:	8b a5       	ldd	r24, Y+43	; 0x2b
    2524:	9c a5       	ldd	r25, Y+44	; 0x2c
    2526:	84 36       	cpi	r24, 0x64	; 100
    2528:	91 05       	cpc	r25, r1
    252a:	0c f4       	brge	.+2      	; 0x252e <Park+0x22e>
    252c:	76 cf       	rjmp	.-276    	; 0x241a <Park+0x11a>
		}
		_delay_ms(100); /* 1 step back */
	}
	/* MOV_BCK(); we can put it in case needed in hardware
	 * _delay_ms(2000) */
	MOV_Ri_BCK();
    252e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <MOV_Ri_BCK>
    2532:	84 c0       	rjmp	.+264    	; 0x263c <Park+0x33c>
	while (i < 100) { //100 need change on hardware
		if (F_Obstacle != 0 && B_Obstacle != 0) {
    2534:	80 91 c5 00 	lds	r24, 0x00C5
    2538:	88 23       	and	r24, r24
    253a:	61 f0       	breq	.+24     	; 0x2554 <Park+0x254>
    253c:	80 91 c4 00 	lds	r24, 0x00C4
    2540:	88 23       	and	r24, r24
    2542:	41 f0       	breq	.+16     	; 0x2554 <Park+0x254>
			MOV_Ri_BCK();
    2544:	0e 94 20 15 	call	0x2a40	; 0x2a40 <MOV_Ri_BCK>
			i++;
    2548:	8b a5       	ldd	r24, Y+43	; 0x2b
    254a:	9c a5       	ldd	r25, Y+44	; 0x2c
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	9c a7       	std	Y+44, r25	; 0x2c
    2550:	8b a7       	std	Y+43, r24	; 0x2b
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <Park+0x258>
		}
		else {
			STP();
    2554:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <STP>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a8 ec       	ldi	r26, 0xC8	; 200
    255e:	b2 e4       	ldi	r27, 0x42	; 66
    2560:	8b 87       	std	Y+11, r24	; 0x0b
    2562:	9c 87       	std	Y+12, r25	; 0x0c
    2564:	ad 87       	std	Y+13, r26	; 0x0d
    2566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	6b 85       	ldd	r22, Y+11	; 0x0b
    256a:	7c 85       	ldd	r23, Y+12	; 0x0c
    256c:	8d 85       	ldd	r24, Y+13	; 0x0d
    256e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a e7       	ldi	r20, 0x7A	; 122
    2576:	53 e4       	ldi	r21, 0x43	; 67
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8f 83       	std	Y+7, r24	; 0x07
    2582:	98 87       	std	Y+8, r25	; 0x08
    2584:	a9 87       	std	Y+9, r26	; 0x09
    2586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2588:	6f 81       	ldd	r22, Y+7	; 0x07
    258a:	78 85       	ldd	r23, Y+8	; 0x08
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <Park+0x2aa>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <Park+0x328>
	else if (__tmp > 65535)
    25aa:	6f 81       	ldd	r22, Y+7	; 0x07
    25ac:	78 85       	ldd	r23, Y+8	; 0x08
    25ae:	89 85       	ldd	r24, Y+9	; 0x09
    25b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <Park+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <Park+0x30a>
    25ec:	89 e1       	ldi	r24, 0x19	; 25
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <Park+0x2f8>
    25fc:	9c 83       	std	Y+4, r25	; 0x04
    25fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <Park+0x2ec>
    2612:	14 c0       	rjmp	.+40     	; 0x263c <Park+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <Park+0x334>
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100); /* 1 step back */
	}
	/* MOV_BCK(); we can put it in case needed in hardware
	 * _delay_ms(2000) */
	MOV_Ri_BCK();
	while (i < 100) { //100 need change on hardware
    263c:	8b a5       	ldd	r24, Y+43	; 0x2b
    263e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2640:	84 36       	cpi	r24, 0x64	; 100
    2642:	91 05       	cpc	r25, r1
    2644:	0c f4       	brge	.+2      	; 0x2648 <Park+0x348>
    2646:	76 cf       	rjmp	.-276    	; 0x2534 <Park+0x234>
		else {
			STP();
		}
		_delay_ms(100);
	}
	STP();
    2648:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <STP>
	LCD_clearScreen();
    264c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <LCD_clearScreen>
	LCD_displayString("*****Parked*****");
    2650:	8b ea       	ldi	r24, 0xAB	; 171
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <LCD_displayString>
}
    2658:	ac 96       	adiw	r28, 0x2c	; 44
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <Timer2_OV_init>:

void Timer2_OV_init (void) {				/* overflow every 32msec */
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0;
    2672:	e4 e4       	ldi	r30, 0x44	; 68
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	10 82       	st	Z, r1
	TCCR2 = (1<<CS20)|(1<<CS21)|(1<<CS22);	/* Initialize timer2 in overflow mode with prescaler 1024 */
    2678:	e5 e4       	ldi	r30, 0x45	; 69
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	87 e0       	ldi	r24, 0x07	; 7
    267e:	80 83       	st	Z, r24
	SET_BIT(TIMSK,TOIE2);					/* Enable timer2 overflow Interrupt */
    2680:	a9 e5       	ldi	r26, 0x59	; 89
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e9 e5       	ldi	r30, 0x59	; 89
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	80 64       	ori	r24, 0x40	; 64
    268c:	8c 93       	st	X, r24
}
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <__vector_4>:

ISR(TIMER2_OVF_vect) {
    2694:	1f 92       	push	r1
    2696:	0f 92       	push	r0
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	0f 92       	push	r0
    269c:	11 24       	eor	r1, r1
    269e:	2f 93       	push	r18
    26a0:	3f 93       	push	r19
    26a2:	4f 93       	push	r20
    26a4:	5f 93       	push	r21
    26a6:	6f 93       	push	r22
    26a8:	7f 93       	push	r23
    26aa:	8f 93       	push	r24
    26ac:	9f 93       	push	r25
    26ae:	af 93       	push	r26
    26b0:	bf 93       	push	r27
    26b2:	ef 93       	push	r30
    26b4:	ff 93       	push	r31
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
	if (frontIRread()) {
    26be:	0e 94 64 06 	call	0xcc8	; 0xcc8 <frontIRread>
    26c2:	88 23       	and	r24, r24
    26c4:	21 f0       	breq	.+8      	; 0x26ce <__vector_4+0x3a>
		F_Obstacle = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	80 93 c5 00 	sts	0x00C5, r24
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <__vector_4+0x3e>
	}
	else {
		F_Obstacle = 0;
    26ce:	10 92 c5 00 	sts	0x00C5, r1
	}
	if (backIRread()) {
    26d2:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <backIRread>
    26d6:	88 23       	and	r24, r24
    26d8:	21 f0       	breq	.+8      	; 0x26e2 <__vector_4+0x4e>
		B_Obstacle = 1;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	80 93 c4 00 	sts	0x00C4, r24
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <__vector_4+0x52>
	}
	else {
		B_Obstacle = 0;
    26e2:	10 92 c4 00 	sts	0x00C4, r1
	}
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	ff 91       	pop	r31
    26ec:	ef 91       	pop	r30
    26ee:	bf 91       	pop	r27
    26f0:	af 91       	pop	r26
    26f2:	9f 91       	pop	r25
    26f4:	8f 91       	pop	r24
    26f6:	7f 91       	pop	r23
    26f8:	6f 91       	pop	r22
    26fa:	5f 91       	pop	r21
    26fc:	4f 91       	pop	r20
    26fe:	3f 91       	pop	r19
    2700:	2f 91       	pop	r18
    2702:	0f 90       	pop	r0
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	0f 90       	pop	r0
    2708:	1f 90       	pop	r1
    270a:	18 95       	reti

0000270c <ULT_init>:

#include "Ultrasonic.h"

void ULT_init(void) {
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (ULT_SENS_DDR,TRIG_PIN);
    2714:	a1 e3       	ldi	r26, 0x31	; 49
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e1 e3       	ldi	r30, 0x31	; 49
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	80 68       	ori	r24, 0x80	; 128
    2720:	8c 93       	st	X, r24
	CLEAR_BIT (ULT_SENS_DDR,ECHO_PIN);
    2722:	a1 e3       	ldi	r26, 0x31	; 49
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e1 e3       	ldi	r30, 0x31	; 49
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	8f 7b       	andi	r24, 0xBF	; 191
    272e:	8c 93       	st	X, r24
	CLEAR_BIT (ULT_SENS_PORT,TRIG_PIN);
    2730:	a2 e3       	ldi	r26, 0x32	; 50
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e2 e3       	ldi	r30, 0x32	; 50
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8f 77       	andi	r24, 0x7F	; 127
    273c:	8c 93       	st	X, r24
}
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <ULT_calc_dis>:

uint16 ULT_calc_dis(void) {
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	6e 97       	sbiw	r28, 0x1e	; 30
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
	uint16 distance = 0, a=0,b=0;
    2758:	1e 8e       	std	Y+30, r1	; 0x1e
    275a:	1d 8e       	std	Y+29, r1	; 0x1d
    275c:	1c 8e       	std	Y+28, r1	; 0x1c
    275e:	1b 8e       	std	Y+27, r1	; 0x1b
    2760:	1a 8e       	std	Y+26, r1	; 0x1a
    2762:	19 8e       	std	Y+25, r1	; 0x19
	SET_BIT (ULT_SENS_PORT,TRIG_PIN);
    2764:	a2 e3       	ldi	r26, 0x32	; 50
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e2 e3       	ldi	r30, 0x32	; 50
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	80 68       	ori	r24, 0x80	; 128
    2770:	8c 93       	st	X, r24
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	a8 e4       	ldi	r26, 0x48	; 72
    2778:	b2 e4       	ldi	r27, 0x42	; 66
    277a:	8d 8b       	std	Y+21, r24	; 0x15
    277c:	9e 8b       	std	Y+22, r25	; 0x16
    277e:	af 8b       	std	Y+23, r26	; 0x17
    2780:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2782:	6d 89       	ldd	r22, Y+21	; 0x15
    2784:	7e 89       	ldd	r23, Y+22	; 0x16
    2786:	8f 89       	ldd	r24, Y+23	; 0x17
    2788:	98 8d       	ldd	r25, Y+24	; 0x18
    278a:	2b ea       	ldi	r18, 0xAB	; 171
    278c:	3a ea       	ldi	r19, 0xAA	; 170
    278e:	4a ea       	ldi	r20, 0xAA	; 170
    2790:	5e e3       	ldi	r21, 0x3E	; 62
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	89 8b       	std	Y+17, r24	; 0x11
    279c:	9a 8b       	std	Y+18, r25	; 0x12
    279e:	ab 8b       	std	Y+19, r26	; 0x13
    27a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27a2:	69 89       	ldd	r22, Y+17	; 0x11
    27a4:	7a 89       	ldd	r23, Y+18	; 0x12
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	9c 89       	ldd	r25, Y+20	; 0x14
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e8       	ldi	r20, 0x80	; 128
    27b0:	5f e3       	ldi	r21, 0x3F	; 63
    27b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b6:	88 23       	and	r24, r24
    27b8:	1c f4       	brge	.+6      	; 0x27c0 <ULT_calc_dis+0x7c>
		__ticks = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	88 8b       	std	Y+16, r24	; 0x10
    27be:	91 c0       	rjmp	.+290    	; 0x28e2 <ULT_calc_dis+0x19e>
	else if (__tmp > 255)
    27c0:	69 89       	ldd	r22, Y+17	; 0x11
    27c2:	7a 89       	ldd	r23, Y+18	; 0x12
    27c4:	8b 89       	ldd	r24, Y+19	; 0x13
    27c6:	9c 89       	ldd	r25, Y+20	; 0x14
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	53 e4       	ldi	r21, 0x43	; 67
    27d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	0c f0       	brlt	.+2      	; 0x27da <ULT_calc_dis+0x96>
    27d8:	7b c0       	rjmp	.+246    	; 0x28d0 <ULT_calc_dis+0x18c>
	{
		_delay_ms(__us / 1000.0);
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4a e7       	ldi	r20, 0x7A	; 122
    27e8:	54 e4       	ldi	r21, 0x44	; 68
    27ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	8c 87       	std	Y+12, r24	; 0x0c
    27f4:	9d 87       	std	Y+13, r25	; 0x0d
    27f6:	ae 87       	std	Y+14, r26	; 0x0e
    27f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    27fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    27fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2800:	9f 85       	ldd	r25, Y+15	; 0x0f
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a e7       	ldi	r20, 0x7A	; 122
    2808:	53 e4       	ldi	r21, 0x43	; 67
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	88 87       	std	Y+8, r24	; 0x08
    2814:	99 87       	std	Y+9, r25	; 0x09
    2816:	aa 87       	std	Y+10, r26	; 0x0a
    2818:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    281a:	68 85       	ldd	r22, Y+8	; 0x08
    281c:	79 85       	ldd	r23, Y+9	; 0x09
    281e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2820:	9b 85       	ldd	r25, Y+11	; 0x0b
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282e:	88 23       	and	r24, r24
    2830:	2c f4       	brge	.+10     	; 0x283c <ULT_calc_dis+0xf8>
		__ticks = 1;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	9f 83       	std	Y+7, r25	; 0x07
    2838:	8e 83       	std	Y+6, r24	; 0x06
    283a:	3f c0       	rjmp	.+126    	; 0x28ba <ULT_calc_dis+0x176>
	else if (__tmp > 65535)
    283c:	68 85       	ldd	r22, Y+8	; 0x08
    283e:	79 85       	ldd	r23, Y+9	; 0x09
    2840:	8a 85       	ldd	r24, Y+10	; 0x0a
    2842:	9b 85       	ldd	r25, Y+11	; 0x0b
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2850:	18 16       	cp	r1, r24
    2852:	4c f5       	brge	.+82     	; 0x28a6 <ULT_calc_dis+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2854:	6c 85       	ldd	r22, Y+12	; 0x0c
    2856:	7d 85       	ldd	r23, Y+13	; 0x0d
    2858:	8e 85       	ldd	r24, Y+14	; 0x0e
    285a:	9f 85       	ldd	r25, Y+15	; 0x0f
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9f 83       	std	Y+7, r25	; 0x07
    287a:	8e 83       	std	Y+6, r24	; 0x06
    287c:	0f c0       	rjmp	.+30     	; 0x289c <ULT_calc_dis+0x158>
    287e:	89 e1       	ldi	r24, 0x19	; 25
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9d 83       	std	Y+5, r25	; 0x05
    2884:	8c 83       	std	Y+4, r24	; 0x04
    2886:	8c 81       	ldd	r24, Y+4	; 0x04
    2888:	9d 81       	ldd	r25, Y+5	; 0x05
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <ULT_calc_dis+0x146>
    288e:	9d 83       	std	Y+5, r25	; 0x05
    2890:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2892:	8e 81       	ldd	r24, Y+6	; 0x06
    2894:	9f 81       	ldd	r25, Y+7	; 0x07
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	9f 83       	std	Y+7, r25	; 0x07
    289a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289c:	8e 81       	ldd	r24, Y+6	; 0x06
    289e:	9f 81       	ldd	r25, Y+7	; 0x07
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	69 f7       	brne	.-38     	; 0x287e <ULT_calc_dis+0x13a>
    28a4:	24 c0       	rjmp	.+72     	; 0x28ee <ULT_calc_dis+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a6:	68 85       	ldd	r22, Y+8	; 0x08
    28a8:	79 85       	ldd	r23, Y+9	; 0x09
    28aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9f 83       	std	Y+7, r25	; 0x07
    28b8:	8e 83       	std	Y+6, r24	; 0x06
    28ba:	8e 81       	ldd	r24, Y+6	; 0x06
    28bc:	9f 81       	ldd	r25, Y+7	; 0x07
    28be:	9b 83       	std	Y+3, r25	; 0x03
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	9b 81       	ldd	r25, Y+3	; 0x03
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <ULT_calc_dis+0x182>
    28ca:	9b 83       	std	Y+3, r25	; 0x03
    28cc:	8a 83       	std	Y+2, r24	; 0x02
    28ce:	0f c0       	rjmp	.+30     	; 0x28ee <ULT_calc_dis+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28d0:	69 89       	ldd	r22, Y+17	; 0x11
    28d2:	7a 89       	ldd	r23, Y+18	; 0x12
    28d4:	8b 89       	ldd	r24, Y+19	; 0x13
    28d6:	9c 89       	ldd	r25, Y+20	; 0x14
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	88 8b       	std	Y+16, r24	; 0x10
    28e2:	88 89       	ldd	r24, Y+16	; 0x10
    28e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	8a 95       	dec	r24
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <ULT_calc_dis+0x1a4>
    28ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	CLEAR_BIT (ULT_SENS_PORT,TRIG_PIN);
    28ee:	a2 e3       	ldi	r26, 0x32	; 50
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e2 e3       	ldi	r30, 0x32	; 50
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	8f 77       	andi	r24, 0x7F	; 127
    28fa:	8c 93       	st	X, r24

	TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler 1100 0001 */
    28fc:	ee e4       	ldi	r30, 0x4E	; 78
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	81 ec       	ldi	r24, 0xC1	; 193
    2902:	80 83       	st	Z, r24
	while ((TIFR&(1<<ICF1)) == 0);
    2904:	e8 e5       	ldi	r30, 0x58	; 88
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	88 2f       	mov	r24, r24
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	80 72       	andi	r24, 0x20	; 32
    2910:	90 70       	andi	r25, 0x00	; 0
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	b9 f3       	breq	.-18     	; 0x2904 <ULT_calc_dis+0x1c0>
	a = ICR1;  		/* Take value of capture register */
    2916:	e6 e4       	ldi	r30, 0x46	; 70
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	91 81       	ldd	r25, Z+1	; 0x01
    291e:	9c 8f       	std	Y+28, r25	; 0x1c
    2920:	8b 8f       	std	Y+27, r24	; 0x1b
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
    2922:	e8 e5       	ldi	r30, 0x58	; 88
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 e2       	ldi	r24, 0x20	; 32
    2928:	80 83       	st	Z, r24
	TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler 1000 0001 */
    292a:	ee e4       	ldi	r30, 0x4E	; 78
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	81 e8       	ldi	r24, 0x81	; 129
    2930:	80 83       	st	Z, r24
	while ((TIFR&(1<<ICF1)) == 0);
    2932:	e8 e5       	ldi	r30, 0x58	; 88
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	88 2f       	mov	r24, r24
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	80 72       	andi	r24, 0x20	; 32
    293e:	90 70       	andi	r25, 0x00	; 0
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	b9 f3       	breq	.-18     	; 0x2932 <ULT_calc_dis+0x1ee>
	b = ICR1;  		/* Take value of capture register */
    2944:	e6 e4       	ldi	r30, 0x46	; 70
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	91 81       	ldd	r25, Z+1	; 0x01
    294c:	9a 8f       	std	Y+26, r25	; 0x1a
    294e:	89 8f       	std	Y+25, r24	; 0x19
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
    2950:	e8 e5       	ldi	r30, 0x58	; 88
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 e2       	ldi	r24, 0x20	; 32
    2956:	80 83       	st	Z, r24
	TCNT1=0;
    2958:	ec e4       	ldi	r30, 0x4C	; 76
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	11 82       	std	Z+1, r1	; 0x01
    295e:	10 82       	st	Z, r1
	TCCR1B = 0;  		/* Stop the timer */
    2960:	ee e4       	ldi	r30, 0x4E	; 78
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	10 82       	st	Z, r1

	distance = (((b-a)*34600)/(F_CPU*2));
    2966:	29 8d       	ldd	r18, Y+25	; 0x19
    2968:	3a 8d       	ldd	r19, Y+26	; 0x1a
    296a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    296c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    296e:	a9 01       	movw	r20, r18
    2970:	48 1b       	sub	r20, r24
    2972:	59 0b       	sbc	r21, r25
    2974:	ca 01       	movw	r24, r20
    2976:	cc 01       	movw	r24, r24
    2978:	a0 e0       	ldi	r26, 0x00	; 0
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	28 e2       	ldi	r18, 0x28	; 40
    297e:	37 e8       	ldi	r19, 0x87	; 135
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <__mulsi3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	20 e8       	ldi	r18, 0x80	; 128
    2992:	34 e8       	ldi	r19, 0x84	; 132
    2994:	4e e1       	ldi	r20, 0x1E	; 30
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__udivmodsi4>
    29a0:	da 01       	movw	r26, r20
    29a2:	c9 01       	movw	r24, r18
    29a4:	9e 8f       	std	Y+30, r25	; 0x1e
    29a6:	8d 8f       	std	Y+29, r24	; 0x1d
	return distance;
    29a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
}
    29ac:	6e 96       	adiw	r28, 0x1e	; 30
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <init_motors>:
#include "motors.h"

void init_motors(void)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
	MOTORS_DDR = 0xFF;
    29c6:	ea e3       	ldi	r30, 0x3A	; 58
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	8f ef       	ldi	r24, 0xFF	; 255
    29cc:	80 83       	st	Z, r24
}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <STP>:

void STP(void)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
	MOTORS_PORT = 0x00;
    29dc:	eb e3       	ldi	r30, 0x3B	; 59
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	10 82       	st	Z, r1
}
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <MOV_FWR>:

void MOV_FWR(void)
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
	MOTORS_PORT  = (1<<F_R_A)|(1<<F_L_A)|(1<<B_R_A)|(1<<B_L_A);
    29f0:	eb e3       	ldi	r30, 0x3B	; 59
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	8a ea       	ldi	r24, 0xAA	; 170
    29f6:	80 83       	st	Z, r24
}
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <MOV_BCK>:

void MOV_BCK(void)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
	MOTORS_PORT  = (1<<F_R_C)|(1<<F_L_C)|(1<<B_R_C)|(1<<B_L_C);
    2a06:	eb e3       	ldi	r30, 0x3B	; 59
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	85 e5       	ldi	r24, 0x55	; 85
    2a0c:	80 83       	st	Z, r24
}
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <MOV_Ri_FWR>:

void MOV_Ri_FWR(void)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
	MOTORS_PORT  = (1<<F_L_A)|(1<<B_L_A);
    2a1c:	eb e3       	ldi	r30, 0x3B	; 59
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	88 e8       	ldi	r24, 0x88	; 136
    2a22:	80 83       	st	Z, r24
	//MOTORS_PORT  = (1<<F_L_A);
}
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <MOV_LEF_FWR>:

void MOV_LEF_FWR(void)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
	MOTORS_PORT  = (1<<F_R_A)|(1<<B_R_A);
    2a32:	eb e3       	ldi	r30, 0x3B	; 59
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	82 e2       	ldi	r24, 0x22	; 34
    2a38:	80 83       	st	Z, r24
}
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <MOV_Ri_BCK>:

void MOV_Ri_BCK(void)
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
	MOTORS_PORT  = (1<<F_L_C)|(1<<B_L_C);
    2a48:	eb e3       	ldi	r30, 0x3B	; 59
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	84 e4       	ldi	r24, 0x44	; 68
    2a4e:	80 83       	st	Z, r24
}
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <MOV_LEF_BCK>:

void MOV_LEF_BCK(void)
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
	MOTORS_PORT  = (1<<F_R_C)|(1<<B_R_C);
    2a5e:	eb e3       	ldi	r30, 0x3B	; 59
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	81 e1       	ldi	r24, 0x11	; 17
    2a64:	80 83       	st	Z, r24
}
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <__mulsi3>:
    2a6c:	62 9f       	mul	r22, r18
    2a6e:	d0 01       	movw	r26, r0
    2a70:	73 9f       	mul	r23, r19
    2a72:	f0 01       	movw	r30, r0
    2a74:	82 9f       	mul	r24, r18
    2a76:	e0 0d       	add	r30, r0
    2a78:	f1 1d       	adc	r31, r1
    2a7a:	64 9f       	mul	r22, r20
    2a7c:	e0 0d       	add	r30, r0
    2a7e:	f1 1d       	adc	r31, r1
    2a80:	92 9f       	mul	r25, r18
    2a82:	f0 0d       	add	r31, r0
    2a84:	83 9f       	mul	r24, r19
    2a86:	f0 0d       	add	r31, r0
    2a88:	74 9f       	mul	r23, r20
    2a8a:	f0 0d       	add	r31, r0
    2a8c:	65 9f       	mul	r22, r21
    2a8e:	f0 0d       	add	r31, r0
    2a90:	99 27       	eor	r25, r25
    2a92:	72 9f       	mul	r23, r18
    2a94:	b0 0d       	add	r27, r0
    2a96:	e1 1d       	adc	r30, r1
    2a98:	f9 1f       	adc	r31, r25
    2a9a:	63 9f       	mul	r22, r19
    2a9c:	b0 0d       	add	r27, r0
    2a9e:	e1 1d       	adc	r30, r1
    2aa0:	f9 1f       	adc	r31, r25
    2aa2:	bd 01       	movw	r22, r26
    2aa4:	cf 01       	movw	r24, r30
    2aa6:	11 24       	eor	r1, r1
    2aa8:	08 95       	ret

00002aaa <__udivmodsi4>:
    2aaa:	a1 e2       	ldi	r26, 0x21	; 33
    2aac:	1a 2e       	mov	r1, r26
    2aae:	aa 1b       	sub	r26, r26
    2ab0:	bb 1b       	sub	r27, r27
    2ab2:	fd 01       	movw	r30, r26
    2ab4:	0d c0       	rjmp	.+26     	; 0x2ad0 <__udivmodsi4_ep>

00002ab6 <__udivmodsi4_loop>:
    2ab6:	aa 1f       	adc	r26, r26
    2ab8:	bb 1f       	adc	r27, r27
    2aba:	ee 1f       	adc	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	a2 17       	cp	r26, r18
    2ac0:	b3 07       	cpc	r27, r19
    2ac2:	e4 07       	cpc	r30, r20
    2ac4:	f5 07       	cpc	r31, r21
    2ac6:	20 f0       	brcs	.+8      	; 0x2ad0 <__udivmodsi4_ep>
    2ac8:	a2 1b       	sub	r26, r18
    2aca:	b3 0b       	sbc	r27, r19
    2acc:	e4 0b       	sbc	r30, r20
    2ace:	f5 0b       	sbc	r31, r21

00002ad0 <__udivmodsi4_ep>:
    2ad0:	66 1f       	adc	r22, r22
    2ad2:	77 1f       	adc	r23, r23
    2ad4:	88 1f       	adc	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	1a 94       	dec	r1
    2ada:	69 f7       	brne	.-38     	; 0x2ab6 <__udivmodsi4_loop>
    2adc:	60 95       	com	r22
    2ade:	70 95       	com	r23
    2ae0:	80 95       	com	r24
    2ae2:	90 95       	com	r25
    2ae4:	9b 01       	movw	r18, r22
    2ae6:	ac 01       	movw	r20, r24
    2ae8:	bd 01       	movw	r22, r26
    2aea:	cf 01       	movw	r24, r30
    2aec:	08 95       	ret

00002aee <__prologue_saves__>:
    2aee:	2f 92       	push	r2
    2af0:	3f 92       	push	r3
    2af2:	4f 92       	push	r4
    2af4:	5f 92       	push	r5
    2af6:	6f 92       	push	r6
    2af8:	7f 92       	push	r7
    2afa:	8f 92       	push	r8
    2afc:	9f 92       	push	r9
    2afe:	af 92       	push	r10
    2b00:	bf 92       	push	r11
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	ca 1b       	sub	r28, r26
    2b18:	db 0b       	sbc	r29, r27
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	09 94       	ijmp

00002b26 <__epilogue_restores__>:
    2b26:	2a 88       	ldd	r2, Y+18	; 0x12
    2b28:	39 88       	ldd	r3, Y+17	; 0x11
    2b2a:	48 88       	ldd	r4, Y+16	; 0x10
    2b2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b30:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b32:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b34:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b36:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b38:	b9 84       	ldd	r11, Y+9	; 0x09
    2b3a:	c8 84       	ldd	r12, Y+8	; 0x08
    2b3c:	df 80       	ldd	r13, Y+7	; 0x07
    2b3e:	ee 80       	ldd	r14, Y+6	; 0x06
    2b40:	fd 80       	ldd	r15, Y+5	; 0x05
    2b42:	0c 81       	ldd	r16, Y+4	; 0x04
    2b44:	1b 81       	ldd	r17, Y+3	; 0x03
    2b46:	aa 81       	ldd	r26, Y+2	; 0x02
    2b48:	b9 81       	ldd	r27, Y+1	; 0x01
    2b4a:	ce 0f       	add	r28, r30
    2b4c:	d1 1d       	adc	r29, r1
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	de bf       	out	0x3e, r29	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	ed 01       	movw	r28, r26
    2b5a:	08 95       	ret

00002b5c <itoa>:
    2b5c:	fb 01       	movw	r30, r22
    2b5e:	9f 01       	movw	r18, r30
    2b60:	e8 94       	clt
    2b62:	42 30       	cpi	r20, 0x02	; 2
    2b64:	c4 f0       	brlt	.+48     	; 0x2b96 <itoa+0x3a>
    2b66:	45 32       	cpi	r20, 0x25	; 37
    2b68:	b4 f4       	brge	.+44     	; 0x2b96 <itoa+0x3a>
    2b6a:	4a 30       	cpi	r20, 0x0A	; 10
    2b6c:	29 f4       	brne	.+10     	; 0x2b78 <itoa+0x1c>
    2b6e:	97 fb       	bst	r25, 7
    2b70:	1e f4       	brtc	.+6      	; 0x2b78 <itoa+0x1c>
    2b72:	90 95       	com	r25
    2b74:	81 95       	neg	r24
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	64 2f       	mov	r22, r20
    2b7a:	77 27       	eor	r23, r23
    2b7c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__udivmodhi4>
    2b80:	80 5d       	subi	r24, 0xD0	; 208
    2b82:	8a 33       	cpi	r24, 0x3A	; 58
    2b84:	0c f0       	brlt	.+2      	; 0x2b88 <itoa+0x2c>
    2b86:	89 5d       	subi	r24, 0xD9	; 217
    2b88:	81 93       	st	Z+, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	a1 f7       	brne	.-24     	; 0x2b78 <itoa+0x1c>
    2b90:	16 f4       	brtc	.+4      	; 0x2b96 <itoa+0x3a>
    2b92:	5d e2       	ldi	r21, 0x2D	; 45
    2b94:	51 93       	st	Z+, r21
    2b96:	10 82       	st	Z, r1
    2b98:	c9 01       	movw	r24, r18
    2b9a:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <strrev>

00002b9e <strrev>:
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	fc 01       	movw	r30, r24
    2ba2:	67 2f       	mov	r22, r23
    2ba4:	71 91       	ld	r23, Z+
    2ba6:	77 23       	and	r23, r23
    2ba8:	e1 f7       	brne	.-8      	; 0x2ba2 <strrev+0x4>
    2baa:	32 97       	sbiw	r30, 0x02	; 2
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <strrev+0x18>
    2bae:	7c 91       	ld	r23, X
    2bb0:	6d 93       	st	X+, r22
    2bb2:	70 83       	st	Z, r23
    2bb4:	62 91       	ld	r22, -Z
    2bb6:	ae 17       	cp	r26, r30
    2bb8:	bf 07       	cpc	r27, r31
    2bba:	c8 f3       	brcs	.-14     	; 0x2bae <strrev+0x10>
    2bbc:	08 95       	ret

00002bbe <__udivmodhi4>:
    2bbe:	aa 1b       	sub	r26, r26
    2bc0:	bb 1b       	sub	r27, r27
    2bc2:	51 e1       	ldi	r21, 0x11	; 17
    2bc4:	07 c0       	rjmp	.+14     	; 0x2bd4 <__udivmodhi4_ep>

00002bc6 <__udivmodhi4_loop>:
    2bc6:	aa 1f       	adc	r26, r26
    2bc8:	bb 1f       	adc	r27, r27
    2bca:	a6 17       	cp	r26, r22
    2bcc:	b7 07       	cpc	r27, r23
    2bce:	10 f0       	brcs	.+4      	; 0x2bd4 <__udivmodhi4_ep>
    2bd0:	a6 1b       	sub	r26, r22
    2bd2:	b7 0b       	sbc	r27, r23

00002bd4 <__udivmodhi4_ep>:
    2bd4:	88 1f       	adc	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	5a 95       	dec	r21
    2bda:	a9 f7       	brne	.-22     	; 0x2bc6 <__udivmodhi4_loop>
    2bdc:	80 95       	com	r24
    2bde:	90 95       	com	r25
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	08 95       	ret

00002be6 <_exit>:
    2be6:	f8 94       	cli

00002be8 <__stop_program>:
    2be8:	ff cf       	rjmp	.-2      	; 0x2be8 <__stop_program>
